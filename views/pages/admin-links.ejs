<div class="min-h-screen bg-white p-4">
    <div class="max-w-7xl mx-auto">
        <!-- Header -->
        <div class="flex items-center justify-between mb-6">
            <div>
                <h1 class="text-3xl font-bold text-gray-900">Admin Links Management</h1>
                <p class="text-gray-600 mt-1">Manage download links, versions, and platforms</p>
            </div>
            <div class="flex items-center space-x-4">
                <button
                    onclick="window.location.href='/admin'"
                    class="inline-flex items-center space-x-2 px-4 py-2 bg-gray-100 text-gray-900 border border-gray-200 rounded-md hover:bg-gray-200 transition-colors"
                >
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z" />
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5a2 2 0 012-2h2a2 2 0 012 2v2H8V5z" />
                    </svg>
                    <span>Manage Files</span>
                </button>
                <div class="flex space-x-2">
                    <button onclick="showAddLinkModal()" class="inline-flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                        </svg>
                        <span>Add Link</span>
                    </button>
                </div>
                <button onclick="toggleStats()" class="inline-flex items-center space-x-2 px-4 py-2 bg-gray-100 text-gray-900 border border-gray-200 rounded-md hover:bg-gray-200 transition-colors">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                    </svg>
                    <span>Stats</span>
                </button>
                <div class="relative">
                    <svg class="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                    </svg>
                    <input
                        type="text"
                        id="search-input"
                        placeholder="Search links..."
                        class="pl-10 pr-4 py-2 bg-white border border-gray-300 rounded-lg text-gray-900 placeholder-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-transparent w-64"
                    />
                </div>
                <div class="relative">
                    <select id="platform-filter" class="px-3 py-2 bg-white border border-gray-300 rounded-lg text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        <option value="All">All Platforms</option>
                        <option value="Windows">Windows</option>
                        <option value="macOS">macOS</option>
                        <option value="Linux">Linux</option>
                        <option value="Android">Android</option>
                        <option value="iOS">iOS</option>
                        <option value="Universal">Universal</option>
                    </select>
                </div>
                <div id="bulk-actions" class="hidden flex items-center space-x-2 bg-red-50 text-red-700 px-3 py-1 rounded">
                    <span id="selected-count">0</span> selected
                    <select id="bulk-action" class="bg-transparent border-none text-red-700">
                        <option value="">Actions</option>
                        <option value="activate">Activate</option>
                        <option value="deactivate">Deactivate</option>
                        <option value="delete">Delete</option>
                    </select>
                    <button onclick="applyBulkAction()" class="px-3 py-1 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors text-sm">
                        Apply
                    </button>
                </div>
            </div>
        </div>

        <!-- Pagination Controls (if pagination data is available) -->
        <% if (typeof pagination !== 'undefined' && pagination) { %>
        <div class="mb-6 flex items-center justify-between">
            <div class="text-sm text-gray-600">
                Showing all <%= pagination.totalLinks %> links (<%= pagination.activeLinksCount %> active, <%= pagination.inactiveLinksCount %> inactive)
            </div>
            <% if (pagination.totalPages > 1) { %>
            <div class="flex items-center space-x-2">
                <button
                    id="prev-page-btn"
                    <%= pagination.hasPrev ? '' : 'disabled' %>
                    class="px-3 py-1 text-sm bg-gray-100 text-gray-900 border border-gray-200 rounded-md hover:bg-gray-200 transition-colors <%= pagination.hasPrev ? '' : 'opacity-50 cursor-not-allowed' %>"
                >
                    Previous
                </button>
                <span class="text-sm text-gray-600">
                    Page <%= pagination.currentPage %> of <%= pagination.totalPages %>
                </span>
                <button
                    id="next-page-btn"
                    <%= pagination.hasNext ? '' : 'disabled' %>
                    class="px-3 py-1 text-sm bg-gray-100 text-gray-900 border border-gray-200 rounded-md hover:bg-gray-200 transition-colors <%= pagination.hasNext ? '' : 'opacity-50 cursor-not-allowed' %>"
                >
                    Next
                </button>
            </div>
            <% } %>
        </div>
        <% } %>

        <!-- Categories and Links -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <% if (typeof categories !== 'undefined') { %>
                <% categories.forEach(function(category) { %>
                <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-shadow">
                    <!-- Category Header -->
                    <div class="bg-gradient-to-r from-blue-50 to-indigo-50 border-b border-gray-200 p-4">
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-3">
                                <div class="w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center">
                                    <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                                    </svg>
                                </div>
                                <div>
                                    <h2 class="text-lg font-semibold text-gray-900"><%= category.name %></h2>
                                    <p class="text-sm text-gray-600"><%= category.description %></p>
                                </div>
                            </div>
                            <div class="flex items-center space-x-2 text-sm text-gray-600">
                                <button onclick="selectAllInCategory('<%= category._id %>')" class="p-1 hover:bg-gray-200 rounded transition-colors" title="Select all links in this category">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                                    </svg>
                                </button>
                                <span id="link-count-<%= category._id %>" class="font-medium">0</span> links
                            </div>
                        </div>
                        <!-- Sorting Headers -->
                        <div class="flex space-x-4 mt-3 text-xs text-gray-600">
                            <button onclick="handleSort('name', '<%= category._id %>')" class="flex items-center space-x-1 hover:text-gray-900 transition-colors">
                                <span>Name</span>
                                <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                                </svg>
                            </button>
                            <button onclick="handleSort('createdAt', '<%= category._id %>')" class="flex items-center space-x-1 hover:text-gray-900 transition-colors">
                                <span>Date</span>
                                <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                                </svg>
                            </button>
                            <button onclick="handleSort('platform', '<%= category._id %>')" class="flex items-center space-x-1 hover:text-gray-900 transition-colors">
                                <span>Platform</span>
                                <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                                </svg>
                            </button>
                        </div>
                    </div>

                    <!-- Links List -->
                    <div class="p-4 space-y-3 max-h-96 overflow-y-auto" id="links-container-<%= category._id %>">
                        <div id="links-<%= category._id %>" class="space-y-3">
                            <!-- Links will be loaded here -->
                        </div>
                    </div>
                </div>
                <% }); %>
            <% } %>
        </div>

        <!-- Stats Sidebar -->
        <div id="stats-sidebar" class="hidden fixed right-0 top-0 h-full w-80 bg-white border-l border-gray-200 shadow-lg z-50 overflow-y-auto">
            <div class="p-4 border-b border-gray-200">
                <div class="flex items-center justify-between">
                    <h2 class="text-xl font-semibold text-gray-900">Statistics</h2>
                    <button onclick="toggleStats()" class="p-1 rounded-md hover:bg-gray-100 transition-colors">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>
            </div>
            <div class="p-4 space-y-6">
                <div>
                    <h3 class="text-lg font-medium text-gray-900 mb-4">Platform Distribution</h3>
                    <canvas id="platform-chart" width="300" height="200"></canvas>
                </div>
                <div>
                    <h3 class="text-lg font-medium text-gray-900 mb-4">Category Distribution</h3>
                    <canvas id="category-chart" width="300" height="200"></canvas>
                </div>
                <div class="text-sm text-gray-600 space-y-1">
                    <p>Total Links: <span id="total-links">0</span></p>
                    <p>Total Downloads: <span id="total-downloads">0</span></p>
                    <p>Active Links: <span id="active-links">0</span></p>
                </div>
            </div>
        </div>

        <!-- Add/Edit Link Modal -->
        <div id="link-modal" class="hidden fixed inset-0 z-50 flex items-center justify-center p-4 bg-gray-900/50 backdrop-blur-sm">
            <div class="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto shadow-2xl">
                <div class="sticky top-0 bg-gray-50 border-b border-gray-200 p-4 z-10">
                    <div class="flex items-center justify-between">
                        <h2 id="modal-title" class="text-2xl font-bold text-gray-900">Add New Link</h2>
                        <button onclick="hideModal()" class="text-gray-600 hover:text-gray-900 p-2 rounded-full hover:bg-gray-100 transition-colors">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                </div>
                <div class="p-6 space-y-6">
                    <form id="link-form" class="space-y-4">
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    Name *
                                </label>
                                <input
                                    type="text"
                                    id="link-name"
                                    required
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                    placeholder="Application Name"
                                />
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    Version *
                                </label>
                                <input
                                    type="text"
                                    id="link-version"
                                    required
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                    placeholder="1.0.0"
                                />
                            </div>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Download URL *
                            </label>
                            <input
                                type="url"
                                id="link-url"
                                required
                                class="w-full px-3 py-2 border border-gray-300 rounded-lg text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                placeholder="https://example.com/download/app.exe"
                            />
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Description
                            </label>
                            <textarea
                                id="link-description"
                                rows="3"
                                class="w-full px-3 py-2 border border-gray-300 rounded-lg text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                placeholder="Brief description of the application or update..."
                            ></textarea>
                        </div>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    Category
                                </label>
                                <select id="link-category" class="w-full px-3 py-2 border border-gray-300 rounded-lg text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                    <option value="">No category</option>
                                    <% if (typeof categories !== 'undefined') { %>
                                        <% categories.forEach(function(category) { %>
                                        <option value="<%= category._id %>"><%= category.name %></option>
                                        <% }); %>
                                    <% } %>
                                </select>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    Platform
                                </label>
                                <select id="link-platform" class="w-full px-3 py-2 border border-gray-300 rounded-lg text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                    <option value="Windows">Windows</option>
                                    <option value="macOS">macOS</option>
                                    <option value="Linux">Linux</option>
                                    <option value="Android">Android</option>
                                    <option value="iOS">iOS</option>
                                    <option value="Universal">Universal</option>
                                </select>
                            </div>
                        </div>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    Tags
                                </label>
                                <input
                                    type="text"
                                    id="link-tags"
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                    placeholder="productivity, development, utility"
                                />
                                <p class="text-sm text-gray-600 mt-1">Separate tags with commas</p>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    File Size
                                </label>
                                <input
                                    type="text"
                                    id="link-fileSize"
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                    placeholder="e.g., 15.2 MB"
                                />
                            </div>
                        </div>

                        <div class="flex items-center">
                            <input
                                type="checkbox"
                                id="link-isActive"
                                checked
                                class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                            />
                            <label for="link-isActive" class="ml-2 block text-sm text-gray-900">
                                Active (link will be available for download)
                            </label>
                        </div>
                    </form>

                    <!-- Action Buttons -->
                    <div class="flex justify-end space-x-3 pt-4 border-t border-gray-200">
                        <button onclick="hideModal()" class="px-4 py-2 bg-gray-100 text-gray-900 border border-gray-200 rounded-md hover:bg-gray-200 transition-colors">
                            Cancel
                        </button>
                        <button onclick="saveLinkData()" class="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
                            Save Link
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Link Details Modal -->
        <div id="details-modal" class="hidden fixed inset-0 z-50 flex items-center justify-center p-4 bg-gray-900/50 backdrop-blur-sm">
            <div class="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto shadow-2xl">
                <div class="sticky top-0 bg-gray-50 border-b border-gray-200 p-4 z-10">
                    <div class="flex items-center justify-between">
                        <h2 class="text-2xl font-bold text-gray-900">Link Details</h2>
                        <button onclick="document.getElementById('details-modal').classList.add('hidden')" class="text-gray-600 hover:text-gray-900 p-2 rounded-full hover:bg-gray-100 transition-colors">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                </div>
                <div class="p-6 space-y-4">
                    <div id="link-details-content">
                        <!-- Link details will be populated here -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Global state
    let links = [];
    let categories = [];
    let selectedLinks = new Set();
    let sortConfig = { key: null, direction: 'asc' };
    let searchTerm = '';
    let platformFilter = 'All';
    let editingLinkId = null;

    // Helper function to get cookie value
    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
        return null;
    }

    // Toast notification system
    function showToast(message, type = 'info', duration = 5000) {
        // Create toast container if it doesn't exist
        let container = document.getElementById('toast-container');
        if (!container) {
            container = document.createElement('div');
            container.id = 'toast-container';
            container.className = 'fixed top-4 right-4 z-50 space-y-2';
            document.body.appendChild(container);
        }

        const toast = document.createElement('div');
        const bgColor = type === 'error' ? 'bg-red-50 border-red-200' :
                       type === 'success' ? 'bg-green-50 border-green-200' :
                       type === 'warning' ? 'bg-yellow-50 border-yellow-200' :
                       'bg-blue-50 border-blue-200';

        const textColor = type === 'error' ? 'text-red-700' :
                         type === 'success' ? 'text-green-700' :
                         type === 'warning' ? 'text-yellow-700' :
                         'text-blue-700';

        toast.className = `max-w-md p-4 border rounded-lg ${bgColor} shadow-lg transform transition-all duration-300 translate-x-full`;
        toast.innerHTML = `
            <div class="flex items-center">
                <div class="flex-shrink-0">
                    ${type === 'error' ? '❌' : type === 'success' ? '✅' : type === 'warning' ? '⚠️' : 'ℹ️'}
                </div>
                <div class="ml-3">
                    <p class="${textColor} font-medium">${message}</p>
                </div>
                <div class="ml-auto pl-3">
                    <button onclick="this.parentElement.parentElement.parentElement.remove()" class="text-gray-400 hover:text-gray-600">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>
            </div>
        `;

        container.appendChild(toast);

        // Animate in
        setTimeout(() => {
            toast.classList.remove('translate-x-full');
        }, 100);

        // Auto remove
        setTimeout(() => {
            toast.classList.add('translate-x-full');
            setTimeout(() => {
                if (toast.parentElement) {
                    toast.remove();
                }
            }, 300);
        }, duration);
    }

    // Utility functions
    function formatBytes(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    function formatDate(dateString) {
        return new Date(dateString).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
        });
    }

    function getPlatformBadgeColor(platform) {
        const colors = {
            'Windows': 'bg-blue-100 text-blue-800',
            'macOS': 'bg-gray-100 text-gray-800',
            'Linux': 'bg-yellow-100 text-yellow-800',
            'Android': 'bg-green-100 text-green-800',
            'iOS': 'bg-purple-100 text-purple-800',
            'Universal': 'bg-indigo-100 text-indigo-800'
        };
        return colors[platform] || 'bg-gray-100 text-gray-800';
    }

    // Initialize page
    document.addEventListener('DOMContentLoaded', function() {
        loadCategories();
        loadLinks();
        setupEventListeners();
        loadStats();
    });

    // Load categories
    async function loadCategories() {
        try {
            const token = getCookie('token');
            if (!token) {
                console.error('No authentication token found');
                showToast('Authentication required. Please log in again.', 'error');
                return;
            }

            const response = await fetch('/api/categories', {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (!response.ok) {
                throw new Error(`Failed to load categories: ${response.status}`);
            }

            categories = await response.json();
            renderCategories();
        } catch (error) {
            console.error('Error loading categories:', error);
            showToast('Failed to load categories', 'error');
        }
    }

    // Load links - fetch both active and inactive
    async function loadLinks() {
        try {
            const token = getCookie('token');
            if (!token) {
                console.error('No authentication token found');
                showToast('Authentication required. Please log in again.', 'error');
                return;
            }

            // Fetch both active and inactive links
            const [activeResponse, inactiveResponse] = await Promise.all([
                fetch('/api/links?isActive=true&limit=1000', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                }),
                fetch('/api/links?isActive=false&limit=1000', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                })
            ]);

            if (!activeResponse.ok || !inactiveResponse.ok) {
                throw new Error('Failed to load links');
            }

            const activeData = await activeResponse.json();
            const inactiveData = await inactiveResponse.json();

            console.log('Links API responses:', {
                activeLinksLength: activeData.links?.length || 0,
                inactiveLinksLength: inactiveData.links?.length || 0,
                sampleActiveLink: activeData.links?.[0] ? { id: activeData.links[0]._id, categoryId: activeData.links[0].categoryId } : 'none',
                sampleInactiveLink: inactiveData.links?.[0] ? { id: inactiveData.links[0]._id, categoryId: inactiveData.links[0].categoryId } : 'none'
            });

            // Combine active and inactive links
            links = [
                ...(activeData.links || []),
                ...(inactiveData.links || [])
            ];

            console.log('Combined links array:', {
                totalLength: links.length,
                sampleLink: links[0] ? { id: links[0]._id, categoryId: links[0].categoryId, categoryIdType: typeof links[0].categoryId } : 'no links'
            });

            renderLinks();
            loadStats();
        } catch (error) {
            console.error('Error loading links:', error);
            showToast('Failed to load links', 'error');
        }
    }

    // Render categories
    function renderCategories() {
        // Update category dropdown in modal
        const categorySelect = document.getElementById('link-category');
        categorySelect.innerHTML = '<option value="">No category</option>';
        categories.forEach(category => {
            const option = document.createElement('option');
            option.value = category._id;
            option.textContent = category.name;
            categorySelect.appendChild(option);
        });
    }

    // Render links
    function renderLinks() {
        // Build filtered links pipeline
        let filtered = links;

        // Apply search filter
        if (searchTerm) {
            filtered = filtered.filter(link =>
                link.name?.toLowerCase().includes(searchTerm) ||
                link.description?.toLowerCase().includes(searchTerm) ||
                link.version?.toLowerCase().includes(searchTerm) ||
                link.tags?.some(tag => tag.toLowerCase().includes(searchTerm))
            );
        }

        // Apply platform filter
        if (platformFilter !== 'All') {
            filtered = filtered.filter(link => link.platform === platformFilter);
        }

        // Render filtered links by category
        categories.forEach(category => {
            // Fix category ID comparison by converting both to strings
            const categoryLinks = filtered.filter(link => link.categoryId?.toString() === category._id.toString());
            const container = document.getElementById(`links-${category._id}`);
            const countElement = document.getElementById(`link-count-${category._id}`);

            console.log(`Category ${category.name}: ${categoryLinks.length} filtered links`);

            if (container) {
                container.innerHTML = '';
                if (categoryLinks.length === 0) {
                    // Show empty state for categories with no links after filtering
                    container.innerHTML = '<p class="text-gray-500 text-center py-8 text-sm">No links match your current filters</p>';
                } else {
                    categoryLinks.forEach(link => {
                        const linkElement = createLinkElement(link, category._id);
                        container.appendChild(linkElement);
                    });
                }
            }

            if (countElement) {
                countElement.textContent = categoryLinks.length;
            }
        });

        updateBulkActionsVisibility();
    }

    // Create link element
    function createLinkElement(link, categoryId) {
        const div = document.createElement('div');
        div.className = `bg-white rounded-lg p-3 border border-gray-200 hover:shadow-md transition-all cursor-pointer ${
            selectedLinks.has(link._id) ? 'ring-2 ring-blue-500 ring-offset-2' : ''
        }`;
        div.setAttribute('data-link-id', link._id);
        div.setAttribute('data-category-id', categoryId);

        const platformBadgeColor = getPlatformBadgeColor(link.platform);
        const statusIcon = link.isActive ?
            '<div class="w-2 h-2 bg-green-500 rounded-full"></div>' :
            '<div class="w-2 h-2 bg-red-500 rounded-full"></div>';

        div.innerHTML = `
            <div class="flex items-start space-x-3">
                <button onclick="event.stopPropagation(); toggleLinkSelection('${link._id}')" class="flex-shrink-0 mt-1">
                    <svg class="w-5 h-5 ${selectedLinks.has(link._id) ? 'text-blue-600' : 'text-gray-400'}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                    </svg>
                </button>
                <div class="flex-shrink-0 w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
                    <svg class="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                    </svg>
                </div>
                <div class="flex-1 min-w-0" onclick="showLinkDetails('${link._id}')">
                    <div class="flex items-center space-x-2 mb-1">
                        <h3 class="font-medium text-gray-900 truncate" title="${link.name}">
                            ${link.name}
                        </h3>
                        <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium ${platformBadgeColor}">
                            ${link.platform}
                        </span>
                        <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800">
                            v${link.version}
                        </span>
                        ${statusIcon}
                    </div>
                    <p class="text-sm text-gray-600">
                        Downloads: ${link.downloadCount || 0} •
                        Created: ${formatDate(link.createdAt)} •
                        ${link.fileSize ? `Size: ${link.fileSize}` : ''}
                    </p>
                    ${link.description ? `<p class="text-xs text-gray-500 mt-1">${link.description}</p>` : ''}
                    ${link.tags && link.tags.length > 0 ? `<div class="flex flex-wrap gap-1 mt-2">${link.tags.map(tag => `<span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800">${tag}</span>`).join('')}</div>` : ''}
                </div>
                <div class="flex space-x-1">
                    <button onclick="event.stopPropagation(); downloadLink('${link._id}')" class="p-1 text-green-600 hover:text-green-800 rounded hover:bg-green-50 transition-colors" title="Download">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                    </button>
                    <button onclick="event.stopPropagation(); showEditLinkModal('${link._id}')" class="p-1 text-blue-600 hover:text-blue-800 rounded hover:bg-blue-50 transition-colors" title="Edit">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                        </svg>
                    </button>
                    <button onclick="event.stopPropagation(); deleteLink('${link._id}')" class="p-1 text-red-600 hover:text-red-800 rounded hover:bg-red-50 transition-colors" title="Delete">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                        </svg>
                    </button>
                </div>
            </div>
        `;
        return div;
    }

    // Setup event listeners
    function setupEventListeners() {
        // Search
        document.getElementById('search-input').addEventListener('input', function(e) {
            searchTerm = e.target.value.toLowerCase();
            renderLinks();
        });

        // Platform filter
        document.getElementById('platform-filter').addEventListener('change', function(e) {
            platformFilter = e.target.value;
            renderLinks();
        });

        // Pagination buttons (simplified for template compatibility)
        const prevBtn = document.getElementById('prev-page-btn');
        const nextBtn = document.getElementById('next-page-btn');

        if (prevBtn) {
            prevBtn.addEventListener('click', function() {
                changePage('prev');
            });
        }

        if (nextBtn) {
            nextBtn.addEventListener('click', function() {
                changePage('next');
            });
        }
    }

    // Link selection functions
    function toggleLinkSelection(linkId) {
        if (selectedLinks.has(linkId)) {
            selectedLinks.delete(linkId);
        } else {
            selectedLinks.add(linkId);
        }
        updateBulkActionsVisibility();
        renderLinks();
    }

    function selectAllInCategory(categoryId) {
        // Fix category ID comparison by converting both to strings
        const categoryLinks = links.filter(link => link.categoryId?.toString() === categoryId.toString());
        const allSelected = categoryLinks.every(link => selectedLinks.has(link._id));

        if (allSelected) {
            categoryLinks.forEach(link => selectedLinks.delete(link._id));
        } else {
            categoryLinks.forEach(link => selectedLinks.add(link._id));
        }
        updateBulkActionsVisibility();
        renderLinks();
    }

    function updateBulkActionsVisibility() {
        const bulkActions = document.getElementById('bulk-actions');
        const selectedCount = document.getElementById('selected-count');

        if (selectedLinks.size > 0) {
            bulkActions.classList.remove('hidden');
            selectedCount.textContent = selectedLinks.size;
        } else {
            bulkActions.classList.add('hidden');
        }
    }

    // Modal functions
    function showAddLinkModal() {
        editingLinkId = null;
        document.getElementById('modal-title').textContent = 'Add New Link';
        document.getElementById('link-form').reset();
        document.getElementById('link-isActive').checked = true;
        document.getElementById('link-modal').classList.remove('hidden');
    }

    function showEditLinkModal(linkId) {
        const link = links.find(l => l._id === linkId);
        if (!link) return;

        editingLinkId = linkId;
        document.getElementById('modal-title').textContent = 'Edit Link';
        document.getElementById('link-name').value = link.name;
        document.getElementById('link-version').value = link.version;
        document.getElementById('link-url').value = link.downloadUrl;
        document.getElementById('link-description').value = link.description || '';
        document.getElementById('link-category').value = link.categoryId || '';
        document.getElementById('link-platform').value = link.platform;
        document.getElementById('link-tags').value = link.tags ? link.tags.join(', ') : '';
        document.getElementById('link-fileSize').value = link.fileSize || '';
        document.getElementById('link-isActive').checked = link.isActive;
        document.getElementById('link-modal').classList.remove('hidden');
    }

    function hideModal() {
        document.getElementById('link-modal').classList.add('hidden');
        editingLinkId = null;
        document.getElementById('link-form').reset();
    }

    function toggleStats() {
        const sidebar = document.getElementById('stats-sidebar');
        sidebar.classList.toggle('hidden');
    }

    // Link operations with proper API calls
    async function saveLinkData() {
        const linkData = {
            name: document.getElementById('link-name').value.trim(),
            version: document.getElementById('link-version').value.trim(),
            downloadUrl: document.getElementById('link-url').value.trim(),
            description: document.getElementById('link-description').value.trim(),
            categoryId: document.getElementById('link-category').value || undefined,
            platform: document.getElementById('link-platform').value,
            tags: document.getElementById('link-tags').value.trim() ?
                  document.getElementById('link-tags').value.split(',').map(tag => tag.trim()).filter(tag => tag) :
                  undefined,
            fileSize: document.getElementById('link-fileSize').value.trim() || undefined,
            isActive: document.getElementById('link-isActive').checked
        };

        // Validate required fields
        if (!linkData.name || !linkData.version || !linkData.downloadUrl) {
            showToast('Please fill in all required fields', 'error');
            return;
        }

        try {
            const token = getCookie('token');
            if (!token) {
                showToast('Authentication required', 'error');
                return;
            }

            let response;
            if (editingLinkId) {
                // Update existing link - PUT /api/links/:id
                response = await fetch(`/api/links/${editingLinkId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify(linkData)
                });
            } else {
                // Create new link - POST /api/links
                response = await fetch('/api/links', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify(linkData)
                });
            }

            if (response.ok) {
                const savedLink = await response.json();
                hideModal();
                await loadLinks();
                showToast(`Link ${editingLinkId ? 'updated' : 'created'} successfully`, 'success');
            } else {
                const errorData = await response.json().catch(() => ({}));
                throw new Error(errorData.msg || errorData.message || 'Save failed');
            }
        } catch (error) {
            console.error('Error saving link:', error);
            showToast('Error saving link: ' + error.message, 'error');
        }
    }

    async function deleteLink(linkId) {
        if (confirm('Are you sure you want to delete this link?')) {
            try {
                const token = getCookie('token');
                if (!token) {
                    showToast('Authentication required', 'error');
                    return;
                }

                // Soft delete - DELETE /api/links/:id
                const response = await fetch(`/api/links/${linkId}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (response.ok) {
                    selectedLinks.delete(linkId);
                    await loadLinks();
                    updateBulkActionsVisibility();
                    showToast('Link deleted successfully', 'success');
                } else {
                    const errorData = await response.json().catch(() => ({}));
                    throw new Error(errorData.msg || errorData.message || 'Delete failed');
                }
            } catch (error) {
                console.error('Error deleting link:', error);
                showToast('Error deleting link: ' + error.message, 'error');
            }
        }
    }

    function applyBulkAction() {
        const action = document.getElementById('bulk-action').value;
        if (!action || selectedLinks.size === 0) return;

        if (action === 'delete') {
            if (confirm(`Delete ${selectedLinks.size} selected links?`)) {
                deleteSelectedLinks();
            }
        } else if (action === 'activate') {
            updateSelectedLinks({ isActive: true });
        } else if (action === 'deactivate') {
            updateSelectedLinks({ isActive: false });
        }
    }

    async function deleteSelectedLinks() {
        const token = getCookie('token');
        if (!token) {
            showToast('Authentication required', 'error');
            return;
        }

        // Send multiple DELETE requests for selected links
        const deletePromises = Array.from(selectedLinks).map(linkId =>
            fetch(`/api/links/${linkId}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            })
        );

        try {
            await Promise.all(deletePromises);
            selectedLinks.clear();
            await loadLinks();
            showToast('Links deleted successfully', 'success');
        } catch (error) {
            console.error('Error deleting links:', error);
            showToast('Error deleting links', 'error');
        }
    }

    async function updateSelectedLinks(updateData) {
        const token = getCookie('token');
        if (!token) {
            showToast('Authentication required', 'error');
            return;
        }

        // Send multiple PUT requests for selected links
        const updatePromises = Array.from(selectedLinks).map(linkId =>
            fetch(`/api/links/${linkId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify(updateData)
            })
        );

        try {
            await Promise.all(updatePromises);
            selectedLinks.clear();
            await loadLinks();
            showToast('Links updated successfully', 'success');
        } catch (error) {
            console.error('Error updating links:', error);
            showToast('Error updating links', 'error');
        }
    }

    function handleSort(field, categoryId) {
        const isCurrentKey = sortConfig.key === field;
        const newDirection = isCurrentKey && sortConfig.direction === 'asc' ? 'desc' : 'asc';

        sortConfig = { key: field, direction: newDirection };

        // Sort links in the specific category
        const categoryLinks = links.filter(link => link.categoryId === categoryId);
        categoryLinks.sort((a, b) => {
            let aVal = a[field];
            let bVal = b[field];

            if (field === 'createdAt') {
                aVal = new Date(aVal);
                bVal = new Date(bVal);
            }

            if (aVal < bVal) {
                return newDirection === 'asc' ? -1 : 1;
            }
            if (aVal > bVal) {
                return newDirection === 'asc' ? 1 : -1;
            }
            return 0;
        });

        // Re-render the category
        renderLinks();
    }

    function showLinkDetails(linkId) {
        const link = links.find(l => l._id === linkId);
        if (!link) return;

        const category = categories.find(c => c._id === link.categoryId);
        const platformBadgeColor = getPlatformBadgeColor(link.platform);
        const statusText = link.isActive ? 'Active' : 'Inactive';
        const statusColor = link.isActive ? 'text-green-600' : 'text-red-600';

        const content = document.getElementById('link-details-content');
        content.innerHTML = `
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div class="space-y-4">
                    <div>
                        <h3 class="text-lg font-semibold text-gray-900 mb-2">Basic Information</h3>
                        <div class="space-y-2 text-sm">
                            <p><strong>Name:</strong> ${link.name}</p>
                            <p><strong>Version:</strong> ${link.version}</p>
                            <p><strong>Platform:</strong> <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium ${platformBadgeColor}">${link.platform}</span></p>
                            <p><strong>Status:</strong> <span class="${statusColor}">${statusText}</span></p>
                            <p><strong>Category:</strong> ${category ? category.name : 'Uncategorized'}</p>
                            ${link.fileSize ? `<p><strong>File Size:</strong> ${link.fileSize}</p>` : ''}
                        </div>
                    </div>
                    ${link.description ? `
                    <div>
                        <h3 class="text-lg font-semibold text-gray-900 mb-2">Description</h3>
                        <p class="text-sm text-gray-600">${link.description}</p>
                    </div>
                    ` : ''}
                    ${link.tags && link.tags.length > 0 ? `
                    <div>
                        <h3 class="text-lg font-semibold text-gray-900 mb-2">Tags</h3>
                        <div class="flex flex-wrap gap-1">
                            ${link.tags.map(tag => `<span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800">${tag}</span>`).join('')}
                        </div>
                    </div>
                    ` : ''}
                </div>
                <div class="space-y-4">
                    <div>
                        <h3 class="text-lg font-semibold text-gray-900 mb-2">Download Information</h3>
                        <div class="space-y-2 text-sm">
                            <p><strong>Download URL:</strong> <a href="${link.downloadUrl}" target="_blank" class="text-blue-600 hover:text-blue-800 break-all">${link.downloadUrl}</a></p>
                            <p><strong>Total Downloads:</strong> ${link.downloadCount || 0}</p>
                            <p><strong>Created:</strong> ${formatDate(link.createdAt)}</p>
                            <p><strong>Last Updated:</strong> ${formatDate(link.updatedAt)}</p>
                        </div>
                    </div>
                    <div class="flex space-x-2">
                        <button onclick="downloadLink('${link._id}')" class="flex-1 bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors">
                            Download Link
                        </button>
                        <button onclick="showEditLinkModal('${link._id}')" class="flex-1 bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700 transition-colors">
                            Edit Link
                        </button>
                    </div>
                </div>
            </div>
        `;

        document.getElementById('details-modal').classList.remove('hidden');
    }

    function downloadLink(linkId) {
        const link = links.find(l => l._id === linkId);
        if (!link) return;

        // Open URL in new tab and track download
        window.open(link.downloadUrl, '_blank');
        trackDownload(linkId);
        showToast('Link opened in new tab', 'success');
    }

    async function trackDownload(linkId) {
        try {
            const token = getCookie('token');
            if (!token) return;

            // Track download - POST /api/links/:id/download
            await fetch(`/api/links/${linkId}/download`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
        } catch (error) {
            console.error('Error tracking download:', error);
        }
    }

    // Enhanced functionality functions
    async function loadStats() {
        try {
            const token = getCookie('token');
            if (!token) {
                console.error('No authentication token found for stats');
                showToast('Authentication required for stats', 'error');
                return;
            }

            // Try to fetch stats from server endpoint first
            try {
                const response = await fetch('/api/links/stats/summary', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (response.ok) {
                    const serverStats = await response.json();

                    // Use server-provided stats
                    const totalLinks = serverStats.totalLinks || 0;
                    const totalDownloads = serverStats.totalDownloads || 0;
                    const activeLinks = totalLinks; // Server only counts active links

                    // Platform distribution from server
                    const platformCounts = serverStats.platformStats || {};

                    // Category distribution from server
                    const categoryCounts = {};
                    if (serverStats.categoryStats) {
                        serverStats.categoryStats.forEach(stat => {
                            const category = categories.find(c => c._id === stat._id);
                            const categoryName = category ? category.name : 'Uncategorized';
                            categoryCounts[categoryName] = stat.count;
                        });
                    }

                    updateStatsDisplay(totalLinks, totalDownloads, activeLinks, platformCounts, categoryCounts);
                    return;
                } else {
                    throw new Error(`Server stats failed: ${response.status}`);
                }
            } catch (serverError) {
                console.warn('Server stats failed, falling back to local computation:', serverError);
                showToast('Using local stats (server unavailable)', 'warning');
            }

            // Fallback to local computation
            const totalLinks = links.length;
            const totalDownloads = links.reduce((sum, link) => sum + (link.downloadCount || 0), 0);
            const activeLinks = links.filter(link => link.isActive).length;

            // Platform distribution
            const platformCounts = {};
            links.forEach(link => {
                platformCounts[link.platform] = (platformCounts[link.platform] || 0) + 1;
            });

            // Category distribution
            const categoryCounts = {};
            links.forEach(link => {
                const category = categories.find(c => c._id === link.categoryId);
                const categoryName = category ? category.name : 'Uncategorized';
                categoryCounts[categoryName] = (categoryCounts[categoryName] || 0) + 1;
            });

            updateStatsDisplay(totalLinks, totalDownloads, activeLinks, platformCounts, categoryCounts);

        } catch (error) {
            console.error('Error loading stats:', error);
            showToast('Error loading statistics', 'error');
        }
    }

    function updateStatsDisplay(totalLinks, totalDownloads, activeLinks, platformCounts, categoryCounts) {
        const totalLinksEl = document.getElementById('total-links');
        const totalDownloadsEl = document.getElementById('total-downloads');
        const activeLinksEl = document.getElementById('active-links');

        if (totalLinksEl) totalLinksEl.textContent = totalLinks;
        if (totalDownloadsEl) totalDownloadsEl.textContent = totalDownloads;
        if (activeLinksEl) activeLinksEl.textContent = activeLinks;
    }

    // Pagination function for future use
    async function changePage(direction) {
        try {
            const token = getCookie('token');
            if (!token) {
                showToast('Authentication required', 'error');
                return;
            }

            // For now, show a message that pagination will be implemented
            showToast(`Pagination feature coming soon - Direction: ${direction}`, 'info');

            // Future implementation would reload links with pagination
            // await loadLinksWithPagination(direction);

        } catch (error) {
            console.error('Error changing page:', error);
            showToast('Error loading page', 'error');
        }
    }
</script>