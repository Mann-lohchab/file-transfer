<div class="min-h-screen bg-white p-4">
    <div class="max-w-7xl mx-auto">
        <!-- Header -->
        <div class="flex items-center justify-between mb-6">
            <div>
                <h1 class="text-3xl font-bold text-gray-900">Admin Panel</h1>
                <p class="text-gray-600 mt-1">Manage files, links, and categories</p>
                <% if (typeof error !== 'undefined' && error) { %>
                    <div class="mt-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                        <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                        </svg>
                        Database connection issue - showing cached/empty data
                    </div>
                <% } %>
            </div>
            <div class="flex items-center space-x-4">
                <div class="flex space-x-2">
                    <button onclick="showUploadModal()"
                        class="inline-flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                        </svg>
                        <span>Upload File/Link</span>
                    </button>
                </div>
                <div class="relative">
                    <svg class="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-600" fill="none"
                        stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                    </svg>
                    <input type="text" id="search-input" placeholder="Search files and links..."
                        class="pl-10 pr-4 py-2 bg-white border border-gray-300 rounded-lg text-gray-900 placeholder-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-transparent w-64" />
                </div>
            </div>
        </div>

        <!-- Error Message Display -->
        <% if (typeof error !== 'undefined' && error) { %>
            <div class="bg-red-50 border-l-4 border-red-500 p-4 mb-6 rounded-r-lg">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <svg class="h-5 w-5 text-red-400" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                        </svg>
                    </div>
                    <div class="ml-3">
                        <h3 class="text-sm font-medium text-red-800">
                            Database Connection Issue
                        </h3>
                        <div class="mt-2 text-sm text-red-700">
                            <p><%= error %></p>
                        </div>
                        <div class="mt-4">
                            <div class="-mx-2 -my-1.5 flex">
                                <button type="button" onclick="window.location.reload()" class="bg-red-50 px-2 py-1.5 rounded-md text-sm font-medium text-red-800 hover:bg-red-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-red-50 focus:ring-red-600">
                                    Retry
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        <% } %>

        <!-- Files Section -->
        <h2 class="text-2xl font-bold text-gray-900 mb-4">Files</h2>
        <div id="files-tab-content" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <% if (Array.isArray(categories) && categories.length > 0) { %>
                <% categories.forEach(function(category) { %>
                    <div
                        class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-shadow">
                        <!-- Category Header -->
                        <div class="bg-gradient-to-r from-blue-50 to-indigo-50 border-b border-gray-200 p-4">
                            <div class="flex items-center justify-between">
                                <div class="flex items-center space-x-3">
                                    <div class="w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center">
                                        <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor"
                                            viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z" />
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                d="M8 5a2 2 0 012-2h2a2 2 0 012 2v2H8V5z" />
                                        </svg>
                                    </div>
                                    <div>
                                        <h2 class="text-lg font-semibold text-gray-900">
                                            <%= category.name %>
                                        </h2>
                                        <p class="text-sm text-gray-600">
                                            <%= category.description %>
                                        </p>
                                    </div>
                                </div>
                                <div class="flex items-center space-x-2 text-sm text-gray-600">
                                    <span id="file-count-<%= category._id %>" class="font-medium">0</span> files
                                </div>
                            </div>
                        </div>

                        <!-- Files List -->
                        <div class="p-4 space-y-3 max-h-96 overflow-y-auto" id="files-container-<%= category._id %>">
                            <div id="files-<%= category._id %>" class="space-y-3">
                                <!-- Files will be loaded here -->
                            </div>
                        </div>
                    </div>
                    <% }); %>
                        <% } else { %>
                            <div class="col-span-full bg-gray-50 border border-gray-200 rounded-lg p-8 text-center">
                                <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z" />
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5a2 2 0 012-2h2a2 2 0 012 2v2H8V5z" />
                                </svg>
                                <h3 class="text-lg font-medium text-gray-900 mb-2">No categories available</h3>
                                <p class="text-gray-600 mb-4">Create categories to organize your files and make them easier to find.</p>
                                <button onclick="showToast('Category creation coming soon!', 'info')" class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
                                    Create Category
                                </button>
                            </div>
                        <% } %>

                    <!-- Uncategorized Files Section -->
                    <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-shadow">
                        <!-- Category Header -->
                        <div class="bg-gradient-to-r from-gray-50 to-slate-50 border-b border-gray-200 p-4">
                            <div class="flex items-center justify-between">
                                <div class="flex items-center space-x-3">
                                    <div class="w-10 h-10 bg-gray-500 rounded-lg flex items-center justify-center">
                                        <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z" />
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5a2 2 0 012-2h2a2 2 0 012 2v2H8V5z" />
                                        </svg>
                                    </div>
                                    <div>
                                        <h2 class="text-lg font-semibold text-gray-900">
                                            Uncategorized Files
                                        </h2>
                                        <p class="text-sm text-gray-600">
                                            Files without a category
                                        </p>
                                    </div>
                                </div>
                                <div class="flex items-center space-x-2 text-sm text-gray-600">
                                    <span id="file-count-uncategorized" class="font-medium">0</span> files
                                </div>
                            </div>
                        </div>

                        <!-- Files List -->
                        <div class="p-4 space-y-3 max-h-96 overflow-y-auto" id="files-container-uncategorized">
                            <div id="files-uncategorized" class="space-y-3">
                                <!-- Uncategorized files will be loaded here -->
                            </div>
                        </div>
                    </div>
        </div>

        <!-- Links Section -->
        <div class="flex items-center justify-between mb-4 mt-8">
            <h2 class="text-2xl font-bold text-gray-900">Links</h2>
            <div class="flex space-x-2">
                <button id="active-links-tab" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
                    Active Links
                </button>
                <button id="inactive-links-tab" class="px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 transition-colors">
                    Inactive Links
                </button>
            </div>
        </div>
        <div id="links-tab-content" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <% if (Array.isArray(categories) && categories.length > 0) { %>
                <% categories.forEach(function(category) { %>
                    <div
                        class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-shadow">
                        <!-- Category Header -->
                        <div class="bg-gradient-to-r from-purple-50 to-indigo-50 border-b border-gray-200 p-4">
                            <div class="flex items-center justify-between">
                                <div class="flex items-center space-x-3">
                                    <div class="w-10 h-10 bg-purple-500 rounded-lg flex items-center justify-center">
                                        <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor"
                                            viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                                        </svg>
                                    </div>
                                    <div>
                                        <h2 class="text-lg font-semibold text-gray-900">
                                            <%= category.name %>
                                        </h2>
                                        <p class="text-sm text-gray-600">
                                            <%= category.description %>
                                        </p>
                                    </div>
                                </div>
                                <div class="flex items-center space-x-2 text-sm text-gray-600">
                                    <span id="link-count-<%= category._id %>" class="font-medium"> 1 </span> links
                                </div>
                            </div>
                        </div>

                        <!-- Links List -->
                        <div class="p-4 space-y-3 max-h-96 overflow-y-auto" id="links-container-<%= category._id %>">
                            <div id="links-<%= category._id %>" class="space-y-3">
                                <!-- Links will be loaded here -->
                            </div>
                        </div>
                    </div>
                    <% }); %>
                        <% } else { %>
                            <div class="col-span-full bg-gray-50 border border-gray-200 rounded-lg p-8 text-center">
                                <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                                </svg>
                                <h3 class="text-lg font-medium text-gray-900 mb-2">No categories available</h3>
                                <p class="text-gray-600 mb-4">Create categories to organize your links and make them easier to find.</p>
                                <button onclick="showToast('Category creation coming soon!', 'info')" class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
                                    Create Category
                                </button>
                            </div>
                        <% } %>

                    <!-- Uncategorized Links Section -->
                    <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-shadow">
                        <!-- Category Header -->
                        <div class="bg-gradient-to-r from-gray-50 to-slate-50 border-b border-gray-200 p-4">
                            <div class="flex items-center justify-between">
                                <div class="flex items-center space-x-3">
                                    <div class="w-10 h-10 bg-gray-500 rounded-lg flex items-center justify-center">
                                        <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                                        </svg>
                                    </div>
                                    <div>
                                        <h2 class="text-lg font-semibold text-gray-900">
                                            Uncategorized Links
                                        </h2>
                                        <p class="text-sm text-gray-600">
                                            Links without a category
                                        </p>
                                    </div>
                                </div>
                                <div class="flex items-center space-x-2 text-sm text-gray-600">
                                    <span id="link-count-uncategorized" class="font-medium">0</span> links
                                </div>
                            </div>
                        </div>

                        <!-- Links List -->
                        <div class="p-4 space-y-3 max-h-96 overflow-y-auto" id="links-container-uncategorized">
                            <div id="links-uncategorized" class="space-y-3">
                                <!-- Uncategorized links will be loaded here -->
                            </div>
                        </div>
                    </div>
        </div>

        <!-- Inactive Links Section (initially hidden) -->
        <div id="inactive-links-tab-content" class="hidden grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <% if (Array.isArray(categories) && categories.length > 0) { %>
                <% categories.forEach(function(category) { %>
                    <div
                        class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-shadow">
                        <!-- Category Header -->
                        <div class="bg-gradient-to-r from-red-50 to-orange-50 border-b border-gray-200 p-4">
                            <div class="flex items-center justify-between">
                                <div class="flex items-center space-x-3">
                                    <div class="w-10 h-10 bg-red-500 rounded-lg flex items-center justify-center">
                                        <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor"
                                            viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                                        </svg>
                                    </div>
                                    <div>
                                        <h2 class="text-lg font-semibold text-gray-900">
                                            <%= category.name %> (Inactive)
                                        </h2>
                                        <p class="text-sm text-gray-600">
                                            <%= category.description %>
                                        </p>
                                    </div>
                                </div>
                                <div class="flex items-center space-x-2 text-sm text-gray-600">
                                    <span id="inactive-link-count-<%= category._id %>" class="font-medium">0</span> links
                                </div>
                            </div>
                        </div>

                        <!-- Inactive Links List -->
                        <div class="p-4 space-y-3 max-h-96 overflow-y-auto" id="inactive-links-container-<%= category._id %>">
                            <div id="inactive-links-<%= category._id %>" class="space-y-3">
                                <!-- Inactive links will be loaded here -->
                            </div>
                        </div>
                    </div>
                    <% }); %>
                        <% } else { %>
                            <div class="col-span-full bg-gray-50 border border-gray-200 rounded-lg p-8 text-center">
                                <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                                </svg>
                                <h3 class="text-lg font-medium text-gray-900 mb-2">No categories available</h3>
                                <p class="text-gray-600">Create categories to organize your links and make them easier to find.</p>
                            </div>
                        <% } %>

                    <!-- Uncategorized Inactive Links Section -->
                    <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-shadow">
                        <!-- Category Header -->
                        <div class="bg-gradient-to-r from-gray-50 to-slate-50 border-b border-gray-200 p-4">
                            <div class="flex items-center justify-between">
                                <div class="flex items-center space-x-3">
                                    <div class="w-10 h-10 bg-gray-500 rounded-lg flex items-center justify-center">
                                        <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                                        </svg>
                                    </div>
                                    <div>
                                        <h2 class="text-lg font-semibold text-gray-900">
                                            Uncategorized Inactive Links
                                        </h2>
                                        <p class="text-sm text-gray-600">
                                            Inactive links without a category
                                        </p>
                                    </div>
                                </div>
                                <div class="flex items-center space-x-2 text-sm text-gray-600">
                                    <span id="inactive-link-count-uncategorized" class="font-medium">0</span> links
                                </div>
                            </div>
                        </div>

                        <!-- Inactive Links List -->
                        <div class="p-4 space-y-3 max-h-96 overflow-y-auto" id="inactive-links-container-uncategorized">
                            <div id="inactive-links-uncategorized" class="space-y-3">
                                <!-- Uncategorized inactive links will be loaded here -->
                            </div>
                        </div>
                    </div>
        </div>


        <!-- Upload Modal -->
        <div id="upload-modal"
            class="hidden fixed inset-0 z-50 flex items-center justify-center p-4 bg-gray-900/50 backdrop-blur-sm">
            <div class="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto shadow-2xl">
                <div class="sticky top-0 bg-gray-50 border-b border-gray-200 p-3 z-10">
                    <div class="flex items-center justify-between">
                        <h2 class="text-xl font-bold text-gray-900">Upload Files & Links</h2>
                        <button onclick="hideUploadModal()"
                            class="text-gray-600 hover:text-gray-900 p-2 rounded-full hover:bg-gray-100 transition-colors">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                </div>
                <div class="p-4 space-y-4">
                    <!-- Upload Mode Tabs -->
                    <div class="flex space-x-1 bg-gray-100 rounded-lg p-1">
                        <button id="file-mode-btn"
                            class="flex-1 px-4 py-2 text-sm font-medium rounded-md transition-colors bg-white text-gray-900 shadow-sm">
                            Upload Files
                        </button>
                        <button id="url-mode-btn"
                            class="flex-1 px-4 py-2 text-sm font-medium rounded-md transition-colors text-gray-600 hover:text-gray-900">
                            Upload Link
                        </button>
                    </div>

                    <!-- File Upload Tab -->
                    <div id="file-upload-tab">
                        <div class="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-blue-500 transition-colors"
                            ondrop="handleFileDrop(event)" ondragover="event.preventDefault()"
                            onclick="document.getElementById('file-input').click()">
                            <svg class="mx-auto h-8 w-8 text-gray-400 mb-2" fill="none" stroke="currentColor"
                                viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                            </svg>
                            <p class="text-sm text-gray-900 mb-3">Drag and drop files here, or click to select</p>
                            <p class="text-xs text-gray-500 mb-3">Accepts all file types</p>
                            <input type="file" multiple id="file-input" class="hidden" accept="*">
                            <label for="file-input"
                                class="cursor-pointer bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors inline-flex items-center space-x-2 text-sm">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                        d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                                </svg>
                                <span>Select Files</span>
                            </label>
                        </div>
                        <div id="file-list" class="space-y-2 mt-3"></div>
                    </div>

                    <!-- URL Upload Tab -->
                    <div id="url-upload-tab" class="hidden space-y-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Download URL *
                            </label>
                            <input type="url" id="url-input" placeholder="https://example.com/download/yourfile"
                                class="w-full px-3 py-2 border border-gray-300 rounded-lg text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                required />
                        </div>
                    </div>

                    <!-- Category and Description Selection -->
                    <div class="flex gap-3">
                        <div class="flex-1">
                            <label class="block text-sm font-medium text-gray-700 mb-1">
                                Category
                            </label>
                            <select id="upload-category"
                                class="w-full px-3 py-2 border border-gray-300 rounded-lg text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                <option value="">No category</option>
                                <% if (Array.isArray(categories) && categories.length > 0) { %>
                                    <% categories.forEach(function(category) { %>
                                        <option value="<%= category._id %>">
                                            <%= category.name %>
                                        </option>
                                        <% }); %>
                                            <% } %>
                            </select>
                        </div>
                        <div class="flex-1">
                            <label class="block text-sm font-medium text-gray-700 mb-1">
                                Description
                            </label>
                            <input type="text" id="upload-description" placeholder="Brief description..."
                                class="w-full px-3 py-2 border border-gray-300 rounded-lg text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-transparent" />
                        </div>
                    </div>

                    <!-- Upload Progress -->
                    <div id="upload-progress" class="hidden">
                        <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                            <div class="flex items-center justify-between mb-2">
                                <span class="text-sm font-medium text-blue-900">Uploading files...</span>
                                <span class="text-sm text-blue-700" id="upload-progress-text">0%</span>
                            </div>
                            <div class="w-full bg-blue-200 rounded-full h-2">
                                <div id="upload-progress-bar"
                                    class="bg-blue-600 h-2 rounded-full transition-all duration-300" style="width: 0%">
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Action Buttons -->
                    <div class="flex justify-end space-x-3 pt-4 border-t border-gray-200">
                        <button onclick="hideUploadModal()"
                            class="px-4 py-2 bg-gray-100 text-gray-900 border border-gray-200 rounded-md hover:bg-gray-200 transition-colors">
                            Cancel
                        </button>
                        <button onclick="uploadFiles()" id="upload-btn"
                            class="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                            </svg>
                            <span id="upload-btn-text">Upload Files</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>

<script>
    // Global state
    let categories = [];
    let files = [];
    let links = [];
    let inactiveLinks = [];
    let uploadMode = 'file';
    let uploadFileList = [];
    let searchTerm = '';
    let currentLinksView = 'active'; // 'active' or 'inactive'


    // Helper function to get cookie value
    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
        return null;
    }

    // Helper function to get authentication token (from localStorage or cookie fallback)
    function getAuthToken() {
        // First try localStorage (set by login redirect)
        const localToken = localStorage.getItem('authToken');
        if (localToken) {
            console.log('Using token from localStorage');
            return localToken;
        }

        // Fallback to cookie (for direct admin page access)
        const cookieToken = getCookie('token');
        if (cookieToken) {
            console.log('Using token from cookie');
            return cookieToken;
        }

        console.log('No authentication token found');
        return null;
    }

    // Toast notification system
    function showToast(message, type = 'info', duration = 5000) {
        // Create toast container if it doesn't exist
        let container = document.getElementById('toast-container');
        if (!container) {
            container = document.createElement('div');
            container.id = 'toast-container';
            container.className = 'fixed top-4 right-4 z-50 space-y-2';
            document.body.appendChild(container);
        }

        const toast = document.createElement('div');
        const bgColor = type === 'error' ? 'bg-red-50 border-red-200' :
            type === 'success' ? 'bg-green-50 border-green-200' :
                type === 'warning' ? 'bg-yellow-50 border-yellow-200' :
                    'bg-blue-50 border-blue-200';

        const textColor = type === 'error' ? 'text-red-700' :
            type === 'success' ? 'text-green-700' :
                type === 'warning' ? 'text-yellow-700' :
                    'text-blue-700';

        toast.className = `max-w-md p-4 border rounded-lg ${bgColor} shadow-lg transform transition-all duration-300 translate-x-full`;
        toast.innerHTML = `
            <div class="flex items-center">
                <div class="flex-shrink-0">
                    ${type === 'error' ? '❌' : type === 'success' ? '✅' : type === 'warning' ? '⚠️' : 'ℹ️'}
                </div>
                <div class="ml-3">
                    <p class="${textColor} font-medium">${message}</p>
                </div>
                <div class="ml-auto pl-3">
                    <button onclick="this.parentElement.parentElement.parentElement.remove()" class="text-gray-400 hover:text-gray-600">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>
            </div>
        `;

        container.appendChild(toast);

        // Animate in
        setTimeout(() => {
            toast.classList.remove('translate-x-full');
        }, 100);

        // Auto remove
        setTimeout(() => {
            toast.classList.add('translate-x-full');
            setTimeout(() => {
                if (toast.parentElement) {
                    toast.remove();
                }
            }, 300);
        }, duration);
    }

    // Utility functions
    function formatBytes(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    function formatDate(dateString) {
        return new Date(dateString).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
        });
    }

    function getPlatformBadgeColor(platform) {
        const colors = {
            'Windows': 'bg-blue-100 text-blue-800',
            'macOS': 'bg-gray-100 text-gray-800',
            'Linux': 'bg-yellow-100 text-yellow-800',
            'Android': 'bg-green-100 text-green-800',
            'iOS': 'bg-purple-100 text-purple-800',
            'Universal': 'bg-indigo-100 text-indigo-800'
        };
        return colors[platform] || 'bg-gray-100 text-gray-800';
    }

    // Initialize page
    document.addEventListener('DOMContentLoaded', function () {
        // Handle URL parameters for tab switching and token
        const urlParams = new URLSearchParams(window.location.search);
        const tabParam = urlParams.get('tab');
        const tokenParam = urlParams.get('token');

        // If token is provided in URL, store it for frontend use
        if (tokenParam) {
            console.log('Token received from URL, storing for frontend use');
            localStorage.setItem('authToken', tokenParam);
            // Clean up URL to remove token for security
            const newUrl = new URL(window.location);
            newUrl.searchParams.delete('token');
            window.history.replaceState({}, document.title, newUrl.pathname + newUrl.search);
        }

        loadCategories();
        loadFiles();
        loadLinks();
        loadInactiveLinks(); // Load inactive links in background
        setupEventListeners();
    });

    // Load categories
    async function loadCategories() {
        try {
            const token = getAuthToken();
            if (!token) {
                console.error('No authentication token found');
                showToast('Authentication required. Please log in again.', 'error');
                return;
            }

            const response = await fetch('/api/categories', {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (!response.ok) {
                throw new Error(`Failed to load categories: ${response.status}`);
            }

            categories = await response.json();
            renderCategories();
        } catch (error) {
            console.error('Error loading categories:', error);
            showToast('Failed to load categories', 'error');
        }
    }

    // Load files
    async function loadFiles() {
        try {
            const token = getAuthToken();
            if (!token) {
                console.error('No authentication token found');
                showToast('Authentication required. Please log in again.', 'error');
                return;
            }

            const response = await fetch('/api/files', {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (!response.ok) {
                throw new Error(`Failed to load files: ${response.status}`);
            }

            files = await response.json();
            renderFiles();
        } catch (error) {
            console.error('Error loading files:', error);
            showToast('Failed to load files', 'error');
        }
    }

    // Load links - fetch only active links
    async function loadLinks() {
        try {
            const token = getAuthToken();
            if (!token) {
                console.error('No authentication token found');
                showToast('Authentication required. Please log in again.', 'error');
                return;
            }

            // Fetch only active links
            const response = await fetch(`/api/links?isActive=true&limit=${typeof DEFAULT_LINK_LIMIT !== 'undefined' ? DEFAULT_LINK_LIMIT : 50}`, {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (!response.ok) {
                throw new Error('Failed to load links');
            }

            const data = await response.json();

            // Use only active links
            links = data.links || [];

            renderLinks();
        } catch (error) {
            console.error('Error loading links:', error);
            showToast('Failed to load links', 'error');
        }
    }

    // Load inactive links
    async function loadInactiveLinks() {
        try {
            const token = getAuthToken();
            if (!token) {
                console.error('No authentication token found');
                showToast('Authentication required. Please log in again.', 'error');
                return;
            }

            // Fetch only inactive links
            const response = await fetch(`/api/links?isActive=false&limit=${typeof DEFAULT_LINK_LIMIT !== 'undefined' ? DEFAULT_LINK_LIMIT : 50}`, {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (!response.ok) {
                throw new Error('Failed to load inactive links');
            }

            const data = await response.json();

            // Use only inactive links
            inactiveLinks = data.links || [];

            renderInactiveLinks();
        } catch (error) {
            console.error('Error loading inactive links:', error);
            showToast('Failed to load inactive links', 'error');
        }
    }

    // Render categories
    function renderCategories() {
        // Update category dropdowns
        const uploadCategory = document.getElementById('upload-category');
        uploadCategory.innerHTML = '<option value="">No category</option>';
        categories.forEach(category => {
            const option = document.createElement('option');
            option.value = category._id;
            option.textContent = category.name;
            uploadCategory.appendChild(option);
        });
    }

    // Render files
    function renderFiles() {
        console.log('Rendering files:', {
            filesLength: files.length,
            categoriesLength: categories.length,
            sampleFile: files[0] ? { id: files[0]._id, categoryId: files[0].categoryId, categoryIdType: typeof files[0].categoryId } : 'no files',
            sampleCategory: categories[0] ? { id: categories[0]._id, idType: typeof categories[0]._id } : 'no categories'
        });

        // Apply search filter if search term exists
        let filesToRender = files;
        if (searchTerm) {
            filesToRender = files.filter(file =>
                file.originalName?.toLowerCase().includes(searchTerm) ||
                file.filename?.toLowerCase().includes(searchTerm) ||
                file.description?.toLowerCase().includes(searchTerm)
            );
        }

        // Create a Set of valid category ids from categories
        const categoryIdSet = new Set(categories.map(category => category._id.toString()));

        categories.forEach(category => {
            // Fix category ID comparison by converting both to strings
            const categoryFiles = filesToRender.filter(file => file.categoryId?.toString() === category._id.toString());
            const container = document.getElementById(`files-${category._id}`);
            const countElement = document.getElementById(`file-count-${category._id}`);

            console.log(`Category ${category.name}: ${categoryFiles.length} files`);

            if (container) {
                container.innerHTML = '';
                if (categoryFiles.length === 0) {
                    // Show empty state for categories with no files
                    const emptyMessage = searchTerm ? 'No files match your current search' : 'No files in this category';
                    container.innerHTML = `<p class="text-gray-500 text-center py-8 text-sm">${emptyMessage}</p>`;
                } else {
                    categoryFiles.forEach(file => {
                        const fileElement = createFileElement(file, category._id);
                        container.appendChild(fileElement);
                    });
                }
            }

            if (countElement) {
                countElement.textContent = categoryFiles.length;
            }
        });

        // Handle uncategorized files - include files whose categoryId is falsy OR not found in categoryIdSet
        const uncategorizedFiles = filesToRender.filter(file => !file.categoryId || !categoryIdSet.has(file.categoryId.toString()));
        const uncategorizedContainer = document.getElementById('files-uncategorized');
        const uncategorizedCountElement = document.getElementById('file-count-uncategorized');

        if (uncategorizedContainer) {
            uncategorizedContainer.innerHTML = '';
            if (uncategorizedFiles.length === 0) {
                // Show empty state for uncategorized files
                const emptyMessage = searchTerm ? 'No uncategorized files match your current search' : 'No uncategorized files';
                uncategorizedContainer.innerHTML = `<p class="text-gray-500 text-center py-8 text-sm">${emptyMessage}</p>`;
            } else {
                uncategorizedFiles.forEach(file => {
                    const fileElement = createFileElement(file, null);
                    uncategorizedContainer.appendChild(fileElement);
                });
            }
        }

        if (uncategorizedCountElement) {
            uncategorizedCountElement.textContent = uncategorizedFiles.length;
        }
    }

    // Render links
    function renderLinks() {
        // Apply search filter
        let filtered = links;
        if (searchTerm) {
            filtered = filtered.filter(link =>
                link.name?.toLowerCase().includes(searchTerm) ||
                link.description?.toLowerCase().includes(searchTerm) ||
                link.version?.toLowerCase().includes(searchTerm) ||
                link.tags?.some(tag => tag.toLowerCase().includes(searchTerm))
            );
        }

        // Create a Set of valid category ids from categories
        const categoryIdSet = new Set(categories.map(category => category._id.toString()));

        // Render filtered links by category
        categories.forEach(category => {
            // Fix category ID comparison by converting both to strings
            const categoryLinks = filtered.filter(link => link.categoryId?.toString() === category._id.toString());
            const container = document.getElementById(`links-${category._id}`);
            const countElement = document.getElementById(`link-count-${category._id}`);

            if (container) {
                container.innerHTML = '';
                if (categoryLinks.length === 0) {
                    // Show empty state for categories with no links after filtering
                    container.innerHTML = '<p class="text-gray-500 text-center py-8 text-sm">No links match your current filters</p>';
                } else {
                    categoryLinks.forEach(link => {
                        const linkElement = createLinkElement(link, category._id);
                        container.appendChild(linkElement);
                    });
                }
            }

            if (countElement) {
                countElement.textContent = categoryLinks.length;
            }
        });

        // Handle uncategorized links - include links whose categoryId is falsy OR not found in categoryIdSet
        const uncategorizedLinks = filtered.filter(link => !link.categoryId || !categoryIdSet.has(link.categoryId.toString()));
        const uncategorizedContainer = document.getElementById('links-uncategorized');
        const uncategorizedCountElement = document.getElementById('link-count-uncategorized');

        if (uncategorizedContainer) {
            uncategorizedContainer.innerHTML = '';
            if (uncategorizedLinks.length === 0) {
                // Show empty state for uncategorized links
                uncategorizedContainer.innerHTML = '<p class="text-gray-500 text-center py-8 text-sm">No uncategorized links</p>';
            } else {
                uncategorizedLinks.forEach(link => {
                    const linkElement = createLinkElement(link, null);
                    uncategorizedContainer.appendChild(linkElement);
                });
            }
        }

        if (uncategorizedCountElement) {
            uncategorizedCountElement.textContent = uncategorizedLinks.length;
        }
    }

    // Render inactive links
    function renderInactiveLinks() {
        // Apply search filter
        let filtered = inactiveLinks;
        if (searchTerm) {
            filtered = filtered.filter(link =>
                link.name?.toLowerCase().includes(searchTerm) ||
                link.description?.toLowerCase().includes(searchTerm) ||
                link.version?.toLowerCase().includes(searchTerm) ||
                link.tags?.some(tag => tag.toLowerCase().includes(searchTerm))
            );
        }

        // Create a Set of valid category ids from categories
        const categoryIdSet = new Set(categories.map(category => category._id.toString()));

        // Render filtered inactive links by category
        categories.forEach(category => {
            // Fix category ID comparison by converting both to strings
            const categoryLinks = filtered.filter(link => link.categoryId?.toString() === category._id.toString());
            const container = document.getElementById(`inactive-links-${category._id}`);
            const countElement = document.getElementById(`inactive-link-count-${category._id}`);

            if (container) {
                container.innerHTML = '';
                if (categoryLinks.length === 0) {
                    // Show empty state for categories with no inactive links after filtering
                    container.innerHTML = '<p class="text-gray-500 text-center py-8 text-sm">No inactive links in this category</p>';
                } else {
                    categoryLinks.forEach(link => {
                        const linkElement = createInactiveLinkElement(link, category._id);
                        container.appendChild(linkElement);
                    });
                }
            }

            if (countElement) {
                countElement.textContent = categoryLinks.length;
            }
        });

        // Handle uncategorized inactive links - include links whose categoryId is falsy OR not found in categoryIdSet
        const uncategorizedLinks = filtered.filter(link => !link.categoryId || !categoryIdSet.has(link.categoryId.toString()));
        const uncategorizedContainer = document.getElementById('inactive-links-uncategorized');
        const uncategorizedCountElement = document.getElementById('inactive-link-count-uncategorized');

        if (uncategorizedContainer) {
            uncategorizedContainer.innerHTML = '';
            if (uncategorizedLinks.length === 0) {
                // Show empty state for uncategorized inactive links
                uncategorizedContainer.innerHTML = '<p class="text-gray-500 text-center py-8 text-sm">No uncategorized inactive links</p>';
            } else {
                uncategorizedLinks.forEach(link => {
                    const linkElement = createInactiveLinkElement(link, null);
                    uncategorizedContainer.appendChild(linkElement);
                });
            }
        }

        if (uncategorizedCountElement) {
            uncategorizedCountElement.textContent = uncategorizedLinks.length;
        }
    }

    // Create file element
    function createFileElement(file, categoryId) {
        const div = document.createElement('div');
        div.className = 'bg-white rounded-lg p-2 border border-gray-200 hover:shadow-md transition-all cursor-pointer';
        div.setAttribute('data-file-id', file._id);

        // Only set data-category-id attribute if categoryId is truthy, otherwise remove it
        if (categoryId) {
            div.setAttribute('data-category-id', categoryId);
        } else {
            div.removeAttribute('data-category-id');
        }

        // Get file extension for icon selection
        const getFileExtension = (filename) => {
            return filename.split('.').pop().toLowerCase();
        };

        const getFileIcon = (file) => {
            if (file.type === 'url') {
                return `<svg class="w-4 h-4 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                </svg>`;
            }

            const ext = getFileExtension(file.originalName || file.filename);
            const iconClass = "w-4 h-4";

            switch (ext) {
                case 'pdf':
                    return `<svg class="${iconClass} text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
                    </svg>`;
                case 'exe':
                    return `<svg class="${iconClass} text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                    </svg>`;
                case 'txt':
                    return `<svg class="${iconClass} text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>`;
                case 'jpg':
                case 'jpeg':
                case 'png':
                case 'gif':
                case 'bmp':
                    return `<svg class="${iconClass} text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>`;
                case 'zip':
                case 'rar':
                case '7z':
                    return `<svg class="${iconClass} text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4" />
                    </svg>`;
                default:
                    return `<svg class="${iconClass} text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>`;
            }
        };

        const fileIcon = getFileIcon(file);
        const bgColor = file.type === 'url' ? 'bg-purple-100' : 'bg-gray-100';

        div.innerHTML = `
            <div class="flex items-center space-x-2">
                <div class="flex-shrink-0 w-8 h-8 ${bgColor} rounded-lg flex items-center justify-center">
                    ${fileIcon}
                </div>
                <div class="flex-1 min-w-0" onclick="showFileDetails('${file._id}')">
                    <h3 class="font-medium text-gray-900 truncate text-sm" title="${file.originalName || file.filename}">
                        ${file.originalName || file.filename}
                    </h3>
                    <p class="text-xs text-gray-600">
                        ${file.type === 'url' ? 'Link' : `${formatBytes(file.size)}`} • ${formatDate(file.uploadedAt)}
                    </p>
                    ${file.description ? `<p class="text-xs text-gray-500 truncate">${file.description}</p>` : ''}
                </div>
                <div class="flex space-x-1 flex-shrink-0">
                    <button onclick="event.stopPropagation(); downloadFile('${file._id}')" class="p-1.5 text-green-600 hover:text-white hover:bg-green-600 rounded transition-colors" title="Download">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                    </button>
                    <button onclick="event.stopPropagation(); editFileMetadata('${file._id}')" class="p-1.5 text-blue-600 hover:text-white hover:bg-blue-600 rounded transition-colors" title="Edit">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                        </svg>
                    </button>
                    <button onclick="event.stopPropagation(); deleteFile('${file._id}')" class="p-1.5 text-red-600 hover:text-white hover:bg-red-600 rounded transition-colors" title="Delete">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                        </svg>
                    </button>
                </div>
            </div>
        `;
        return div;
    }

    // Create link element
    function createLinkElement(link, categoryId) {
        const div = document.createElement('div');
        div.className = 'bg-white rounded-lg p-3 border border-gray-200 hover:shadow-md transition-all cursor-pointer';

        const platformBadgeColor = getPlatformBadgeColor(link.platform);
        const statusIcon = link.isActive ?
            '<div class="w-2 h-2 bg-green-500 rounded-full"></div>' :
            '<div class="w-2 h-2 bg-red-500 rounded-full"></div>';

        div.innerHTML = `
            <div class="flex items-start space-x-3">
                <div class="flex-shrink-0 w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
                    <svg class="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                    </svg>
                </div>
                <div class="flex-1 min-w-0" onclick="showLinkDetails('${link._id}')">
                    <div class="flex items-center space-x-2 mb-1">
                        <h3 class="font-medium text-gray-900 truncate" title="${link.name}">
                            ${link.name}
                        </h3>
                        <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium ${platformBadgeColor}">
                            ${link.platform}
                        </span>
                        <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800">
                            v${link.version}
                        </span>
                        ${statusIcon}
                    </div>
                    <p class="text-sm text-gray-600">
                        Downloads: ${link.downloadCount || 0} •
                        Created: ${formatDate(link.createdAt)} •
                        ${link.fileSize ? `Size: ${link.fileSize}` : ''}
                    </p>
                    ${link.description ? `<p class="text-xs text-gray-500 mt-1">${link.description}</p>` : ''}
                    ${link.tags && link.tags.length > 0 ? `<div class="flex flex-wrap gap-1 mt-2">${link.tags.map(tag => `<span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800">${tag}</span>`).join('')}</div>` : ''}
                </div>
                <div class="flex space-x-1">
                    <button onclick="event.stopPropagation(); downloadLink('${link._id}')" class="p-1 text-green-600 hover:text-green-800 rounded hover:bg-green-50 transition-colors" title="Download">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                    </button>
                    <button onclick="event.stopPropagation(); showEditLinkModal('${link._id}')" class="p-1 text-blue-600 hover:text-blue-800 rounded hover:bg-blue-50 transition-colors" title="Edit">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                        </svg>
                    </button>
                    <button onclick="event.stopPropagation(); deleteLink('${link._id}')" class="p-1 text-red-600 hover:text-red-800 rounded hover:bg-red-50 transition-colors" title="Delete">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                        </svg>
                    </button>
                </div>
            </div>
        `;
        return div;
    }

    // Create inactive link element
    function createInactiveLinkElement(link, categoryId) {
        const div = document.createElement('div');
        div.className = 'bg-white rounded-lg p-3 border border-gray-200 hover:shadow-md transition-all cursor-pointer opacity-75';

        const platformBadgeColor = getPlatformBadgeColor(link.platform);
        const statusIcon = '<div class="w-2 h-2 bg-red-500 rounded-full" title="Inactive"></div>';

        div.innerHTML = `
            <div class="flex items-start space-x-3">
                <div class="flex-shrink-0 w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center">
                    <svg class="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                    </svg>
                </div>
                <div class="flex-1 min-w-0" onclick="showInactiveLinkDetails('${link._id}')">
                    <div class="flex items-center space-x-2 mb-1">
                        <h3 class="font-medium text-gray-900 truncate" title="${link.name}">
                            ${link.name}
                        </h3>
                        <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium ${platformBadgeColor}">
                            ${link.platform}
                        </span>
                        <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800">
                            v${link.version}
                        </span>
                        ${statusIcon}
                    </div>
                    <p class="text-sm text-gray-600">
                        Downloads: ${link.downloadCount || 0} •
                        Created: ${formatDate(link.createdAt)} •
                        ${link.fileSize ? `Size: ${link.fileSize}` : ''}
                    </p>
                    ${link.description ? `<p class="text-xs text-gray-500 mt-1">${link.description}</p>` : ''}
                    ${link.tags && link.tags.length > 0 ? `<div class="flex flex-wrap gap-1 mt-2">${link.tags.map(tag => `<span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800">${tag}</span>`).join('')}</div>` : ''}
                </div>
                <div class="flex space-x-1">
                    <button onclick="event.stopPropagation(); restoreLink('${link._id}')" class="p-1 text-green-600 hover:text-green-800 rounded hover:bg-green-50 transition-colors" title="Restore">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                    </button>
                    <button onclick="event.stopPropagation(); permanentlyDeleteLink('${link._id}')" class="p-1 text-red-600 hover:text-red-800 rounded hover:bg-red-50 transition-colors" title="Permanently Delete">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                        </svg>
                    </button>
                </div>
            </div>
        `;
        return div;
    }

    // Setup event listeners
    function setupEventListeners() {
        // Search
        document.getElementById('search-input').addEventListener('input', function (e) {
            searchTerm = e.target.value.toLowerCase();

            // Render files and links with search filter
            renderFiles();
            if (currentLinksView === 'active') {
                renderLinks();
            } else {
                renderInactiveLinks();
            }
        });

        // Tab switching for active/inactive links
        document.getElementById('active-links-tab').addEventListener('click', function () {
            currentLinksView = 'active';
            document.getElementById('links-tab-content').classList.remove('hidden');
            document.getElementById('inactive-links-tab-content').classList.add('hidden');

            // Update button styles
            this.classList.remove('bg-gray-200', 'text-gray-700');
            this.classList.add('bg-blue-600', 'text-white');
            document.getElementById('inactive-links-tab').classList.remove('bg-blue-600', 'text-white');
            document.getElementById('inactive-links-tab').classList.add('bg-gray-200', 'text-gray-700');

            // Refresh active links view
            renderLinks();
        });

        document.getElementById('inactive-links-tab').addEventListener('click', function () {
            currentLinksView = 'inactive';
            document.getElementById('links-tab-content').classList.add('hidden');
            document.getElementById('inactive-links-tab-content').classList.remove('hidden');

            // Update button styles
            this.classList.remove('bg-gray-200', 'text-gray-700');
            this.classList.add('bg-blue-600', 'text-white');
            document.getElementById('active-links-tab').classList.remove('bg-blue-600', 'text-white');
            document.getElementById('active-links-tab').classList.add('bg-gray-200', 'text-gray-700');

            // Refresh inactive links view
            renderInactiveLinks();
        });


        // File input
        document.getElementById('file-input').addEventListener('change', function (e) {
            handleFileSelection(e.target.files);
        });

        // Tab switching
        document.getElementById('file-mode-btn').addEventListener('click', function () {
            uploadMode = 'file';
            document.getElementById('file-upload-tab').classList.remove('hidden');
            document.getElementById('url-upload-tab').classList.add('hidden');
            this.classList.add('bg-white', 'text-gray-900', 'shadow-sm');
            document.getElementById('url-mode-btn').classList.remove('bg-white', 'text-gray-900', 'shadow-sm');
        });

        document.getElementById('url-mode-btn').addEventListener('click', function () {
            uploadMode = 'url';
            document.getElementById('file-upload-tab').classList.add('hidden');
            document.getElementById('url-upload-tab').classList.remove('hidden');
            this.classList.add('bg-white', 'text-gray-900', 'shadow-sm');
            document.getElementById('file-mode-btn').classList.remove('bg-white', 'text-gray-900', 'shadow-sm');
        });

        // URL input event listener to enable/disable upload button dynamically
        document.getElementById('url-input').addEventListener('input', function () {
            updateUploadButton();
        });
    }


    // Modal functions
    function showUploadModal() {
        document.getElementById('upload-modal').classList.remove('hidden');
    }

    function hideUploadModal() {
        document.getElementById('upload-modal').classList.add('hidden');

        // Reset all upload state
        uploadFileList = [];
        document.getElementById('file-input').value = '';
        document.getElementById('url-input').value = '';
        document.getElementById('upload-category').value = '';
        document.getElementById('upload-description').value = '';

        // Reset progress indicators
        const progressContainer = document.getElementById('upload-progress');
        const progressBar = document.getElementById('upload-progress-bar');
        const progressText = document.getElementById('upload-progress-text');
        const uploadBtn = document.getElementById('upload-btn');
        const uploadBtnText = document.getElementById('upload-btn-text');

        if (progressContainer) progressContainer.classList.add('hidden');
        if (progressBar) progressBar.style.width = '0%';
        if (progressText) progressText.textContent = '0%';
        if (uploadBtn) {
            uploadBtn.disabled = true;
            uploadBtnText.textContent = 'Upload Files';
        }

        // Reset upload mode to file
        uploadMode = 'file';
        document.getElementById('file-upload-tab').classList.remove('hidden');
        document.getElementById('url-upload-tab').classList.add('hidden');
        document.getElementById('file-mode-btn').classList.add('bg-white', 'text-gray-900', 'shadow-sm');
        document.getElementById('url-mode-btn').classList.remove('bg-white', 'text-gray-900', 'shadow-sm');

        // Clear file list
        renderFileList();
    }

    function toggleStats() {
        const sidebar = document.getElementById('stats-sidebar');
        sidebar.classList.toggle('hidden');
    }

    // File operations
    async function deleteFile(fileId) {
        if (confirm('Are you sure you want to delete this file?')) {
            try {
                const token = getAuthToken();
                if (!token) {
                    showToast('Authentication required', 'error');
                    return;
                }

                const response = await fetch(`/api/files/${fileId}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (response.ok) {
                    await loadFiles();
                    showToast('File deleted successfully', 'success');
                } else {
                    const errorData = await response.json().catch(() => ({}));
                    throw new Error(errorData.message || 'Delete failed');
                }
            } catch (error) {
                console.error('Error deleting file:', error);
                showToast('Error deleting file: ' + error.message, 'error');
            }
        }
    }

    async function deleteLink(linkId) {
        if (confirm('Are you sure you want to delete this link?')) {
            try {
                const token = getAuthToken();
                if (!token) {
                    showToast('Authentication required', 'error');
                    return;
                }

                // Soft delete - DELETE /api/links/:id
                const response = await fetch(`/api/links/${linkId}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (response.ok) {
                    await loadLinks();
                    showToast('Link deleted successfully', 'success');
                } else {
                    const errorData = await response.json().catch(() => ({}));
                    throw new Error(errorData.msg || errorData.message || 'Delete failed');
                }
            } catch (error) {
                console.error('Error deleting link:', error);
                showToast('Error deleting link: ' + error.message, 'error');
            }
        }
    }

    function editFile(fileId) {
        // TODO: Implement edit functionality
        showToast('Edit functionality coming soon', 'info');
    }

    function showEditLinkModal(linkId) {
        const link = links.find(l => l._id === linkId);
        if (!link) return;

        // Create edit modal
        const modal = document.createElement('div');
        modal.className = 'fixed inset-0 z-50 flex items-center justify-center p-4 bg-gray-900/50 backdrop-blur-sm';
        modal.innerHTML = `
            <div class="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto shadow-2xl">
                <div class="sticky top-0 bg-gray-50 border-b border-gray-200 p-4 z-10">
                    <div class="flex items-center justify-between">
                        <h2 class="text-2xl font-bold text-gray-900">Edit Link</h2>
                        <button onclick="this.closest('.fixed').remove()" class="text-gray-600 hover:text-gray-900 p-2 rounded-full hover:bg-gray-100 transition-colors">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                </div>
                <div class="p-6 space-y-6">
                    <form id="edit-link-form" class="space-y-4">
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    Name *
                                </label>
                                <input
                                    type="text"
                                    id="edit-link-name"
                                    required
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                    placeholder="Application Name"
                                />
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    Version *
                                </label>
                                <input
                                    type="text"
                                    id="edit-link-version"
                                    required
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                    placeholder="1.0.0"
                                />
                            </div>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Download URL *
                            </label>
                            <input
                                type="url"
                                id="edit-link-url"
                                required
                                class="w-full px-3 py-2 border border-gray-300 rounded-lg text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                placeholder="https://example.com/download/app.exe"
                            />
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Description
                            </label>
                            <textarea
                                id="edit-link-description"
                                rows="3"
                                class="w-full px-3 py-2 border border-gray-300 rounded-lg text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                placeholder="Brief description of the application or update..."
                            ></textarea>
                        </div>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    Category
                                </label>
                                <select id="edit-link-category" class="w-full px-3 py-2 border border-gray-300 rounded-lg text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                    <option value="">No category</option>
                                    ${Array.isArray(categories) ? categories.map(cat =>
            `<option value="${cat._id}">${cat.name}</option>`
        ).join('') : ''}
                                </select>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    Platform
                                </label>
                                <select id="edit-link-platform" class="w-full px-3 py-2 border border-gray-300 rounded-lg text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                    <option value="Windows">Windows</option>
                                    <option value="macOS">macOS</option>
                                    <option value="Linux">Linux</option>
                                    <option value="Android">Android</option>
                                    <option value="iOS">iOS</option>
                                    <option value="Universal">Universal</option>
                                </select>
                            </div>
                        </div>

                        <div class="flex items-center">
                            <input
                                type="checkbox"
                                id="edit-link-isActive"
                                class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                            />
                            <label for="edit-link-isActive" class="ml-2 block text-sm text-gray-900">
                                Active (link will be available for download)
                            </label>
                        </div>
                    </form>

                    <!-- Action Buttons -->
                    <div class="flex justify-end space-x-3 pt-4 border-t border-gray-200">
                        <button onclick="this.closest('.fixed').remove()" class="px-4 py-2 bg-gray-100 text-gray-900 border border-gray-200 rounded-md hover:bg-gray-200 transition-colors">
                            Cancel
                        </button>
                        <button onclick="saveLinkData('${linkId}')" class="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
                            Save Changes
                        </button>
                    </div>
                </div>
            </div>
        `;

        // Populate form with current link data
        modal.querySelector('#edit-link-name').value = link.name;
        modal.querySelector('#edit-link-version').value = link.version;
        modal.querySelector('#edit-link-url').value = link.downloadUrl;
        modal.querySelector('#edit-link-description').value = link.description || '';
        modal.querySelector('#edit-link-category').value = link.categoryId || '';
        modal.querySelector('#edit-link-platform').value = link.platform;
        modal.querySelector('#edit-link-isActive').checked = link.isActive;

        document.body.appendChild(modal);
    }

    async function saveLinkData(linkId) {
        const linkData = {
            name: document.getElementById('edit-link-name').value.trim(),
            version: document.getElementById('edit-link-version').value.trim(),
            downloadUrl: document.getElementById('edit-link-url').value.trim(),
            description: document.getElementById('edit-link-description').value.trim(),
            categoryId: document.getElementById('edit-link-category').value || undefined,
            platform: document.getElementById('edit-link-platform').value,
            isActive: document.getElementById('edit-link-isActive').checked
        };

        // Validate required fields
        if (!linkData.name || !linkData.version || !linkData.downloadUrl) {
            showToast('Please fill in all required fields', 'error');
            return;
        }

        try {
            const token = getAuthToken();
            if (!token) {
                showToast('Authentication required', 'error');
                return;
            }

            const response = await fetch(`/api/links/${linkId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify(linkData)
            });

            if (response.ok) {
                // Close modal
                document.querySelector('.fixed').remove();
                // Refresh links based on current view
                if (currentLinksView === 'active') {
                    await loadLinks();
                } else {
                    await loadInactiveLinks();
                }
                showToast('Link updated successfully', 'success');
            } else {
                const errorData = await response.json().catch(() => ({}));
                throw new Error(errorData.message || 'Update failed');
            }
        } catch (error) {
            console.error('Error updating link:', error);
            showToast('Error updating link: ' + error.message, 'error');
        }
    }

    // Restore inactive link to active
    async function restoreLink(linkId) {
        if (confirm('Are you sure you want to restore this link? It will become active again.')) {
            try {
                const token = getAuthToken();
                if (!token) {
                    showToast('Authentication required', 'error');
                    return;
                }

                const response = await fetch(`/api/links/${linkId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify({ isActive: true })
                });

                if (response.ok) {
                    await loadInactiveLinks();
                    await loadLinks(); // Also refresh active links
                    showToast('Link restored successfully', 'success');
                } else {
                    const errorData = await response.json().catch(() => ({}));
                    throw new Error(errorData.message || 'Restore failed');
                }
            } catch (error) {
                console.error('Error restoring link:', error);
                showToast('Error restoring link: ' + error.message, 'error');
            }
        }
    }

    // Permanently delete link (remove from database)
    async function permanentlyDeleteLink(linkId) {
        if (confirm('Are you sure you want to permanently delete this link? This action cannot be undone.')) {
            try {
                const token = getAuthToken();
                if (!token) {
                    showToast('Authentication required', 'error');
                    return;
                }

                // For permanent deletion, we'll need to modify the API to support it
                // For now, we'll use a special flag or endpoint
                const response = await fetch(`/api/links/${linkId}/permanent`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (response.ok) {
                    await loadInactiveLinks();
                    showToast('Link permanently deleted', 'success');
                } else {
                    const errorData = await response.json().catch(() => ({}));
                    throw new Error(errorData.message || 'Permanent delete failed');
                }
            } catch (error) {
                console.error('Error permanently deleting link:', error);
                showToast('Error permanently deleting link: ' + error.message, 'error');
            }
        }
    }

    // Show inactive link details
    function showInactiveLinkDetails(linkId) {
        const link = inactiveLinks.find(l => l._id === linkId);
        if (!link) return;

        const category = categories.find(c => c._id === link.categoryId);
        const platformBadgeColor = getPlatformBadgeColor(link.platform);

        // Create modal
        const modal = document.createElement('div');
        modal.className = 'fixed inset-0 z-50 flex items-center justify-center p-4 bg-gray-900/50 backdrop-blur-sm';
        modal.innerHTML = `
            <div class="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto shadow-2xl">
                <div class="sticky top-0 bg-gray-50 border-b border-gray-200 p-4 z-10">
                    <div class="flex items-center justify-between">
                        <h2 class="text-2xl font-bold text-gray-900">Inactive Link Details</h2>
                        <button onclick="this.closest('.fixed').remove()" class="text-gray-600 hover:text-gray-900 p-2 rounded-full hover:bg-gray-100 transition-colors">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                </div>
                <div class="p-6 space-y-6">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div class="space-y-4">
                            <div>
                                <h3 class="text-lg font-semibold text-gray-900 mb-2">Basic Information</h3>
                                <div class="space-y-2 text-sm">
                                    <p><strong>Name:</strong> ${link.name}</p>
                                    <p><strong>Version:</strong> ${link.version}</p>
                                    <p><strong>Platform:</strong> <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium ${platformBadgeColor}">${link.platform}</span></p>
                                    <p><strong>Status:</strong> <span class="text-red-600">Inactive</span></p>
                                    <p><strong>Category:</strong> ${category ? category.name : 'Uncategorized'}</p>
                                    ${link.fileSize ? `<p><strong>File Size:</strong> ${link.fileSize}</p>` : ''}
                                </div>
                            </div>
                            ${link.description ? `
                            <div>
                                <h3 class="text-lg font-semibold text-gray-900 mb-2">Description</h3>
                                <p class="text-sm text-gray-600">${link.description}</p>
                            </div>
                            ` : ''}
                            ${link.tags && link.tags.length > 0 ? `
                            <div>
                                <h3 class="text-lg font-semibold text-gray-900 mb-2">Tags</h3>
                                <div class="flex flex-wrap gap-1">
                                    ${link.tags.map(tag => `<span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800">${tag}</span>`).join('')}
                                </div>
                            </div>
                            ` : ''}
                        </div>
                        <div class="space-y-4">
                            <div>
                                <h3 class="text-lg font-semibold text-gray-900 mb-2">Download Information</h3>
                                <div class="space-y-2 text-sm">
                                    <p><strong>Download URL:</strong> <a href="${link.downloadUrl}" target="_blank" class="text-blue-600 hover:text-blue-800 break-all">${link.downloadUrl}</a></p>
                                    <p><strong>Total Downloads:</strong> ${link.downloadCount || 0}</p>
                                    <p><strong>Created:</strong> ${formatDate(link.createdAt)}</p>
                                    <p><strong>Last Updated:</strong> ${formatDate(link.updatedAt)}</p>
                                </div>
                            </div>
                            <div class="flex space-x-2">
                                <button onclick="restoreLink('${link._id}')" class="flex-1 bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition-colors">
                                    Restore Link
                                </button>
                                <button onclick="permanentlyDeleteLink('${link._id}')" class="flex-1 bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700 transition-colors">
                                    Delete Permanently
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(modal);
    }

    function showLinkDetails(linkId) {
        const link = links.find(l => l._id === linkId);
        if (!link) return;

        const category = categories.find(c => c._id === link.categoryId);
        const platformBadgeColor = getPlatformBadgeColor(link.platform);
        const statusText = link.isActive ? 'Active' : 'Inactive';
        const statusColor = link.isActive ? 'text-green-600' : 'text-red-600';

        // Create modal
        const modal = document.createElement('div');
        modal.className = 'fixed inset-0 z-50 flex items-center justify-center p-4 bg-gray-900/50 backdrop-blur-sm';
        modal.innerHTML = `
            <div class="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto shadow-2xl">
                <div class="sticky top-0 bg-gray-50 border-b border-gray-200 p-4 z-10">
                    <div class="flex items-center justify-between">
                        <h2 class="text-2xl font-bold text-gray-900">Link Details</h2>
                        <button onclick="this.closest('.fixed').remove()" class="text-gray-600 hover:text-gray-900 p-2 rounded-full hover:bg-gray-100 transition-colors">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                </div>
                <div class="p-6 space-y-6">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div class="space-y-4">
                            <div>
                                <h3 class="text-lg font-semibold text-gray-900 mb-2">Basic Information</h3>
                                <div class="space-y-2 text-sm">
                                    <p><strong>Name:</strong> ${link.name}</p>
                                    <p><strong>Version:</strong> ${link.version}</p>
                                    <p><strong>Platform:</strong> <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium ${platformBadgeColor}">${link.platform}</span></p>
                                    <p><strong>Status:</strong> <span class="${statusColor}">${statusText}</span></p>
                                    <p><strong>Category:</strong> ${category ? category.name : 'Uncategorized'}</p>
                                    ${link.fileSize ? `<p><strong>File Size:</strong> ${link.fileSize}</p>` : ''}
                                </div>
                            </div>
                            ${link.description ? `
                            <div>
                                <h3 class="text-lg font-semibold text-gray-900 mb-2">Description</h3>
                                <p class="text-sm text-gray-600">${link.description}</p>
                            </div>
                            ` : ''}
                            ${link.tags && link.tags.length > 0 ? `
                            <div>
                                <h3 class="text-lg font-semibold text-gray-900 mb-2">Tags</h3>
                                <div class="flex flex-wrap gap-1">
                                    ${link.tags.map(tag => `<span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800">${tag}</span>`).join('')}
                                </div>
                            </div>
                            ` : ''}
                        </div>
                        <div class="space-y-4">
                            <div>
                                <h3 class="text-lg font-semibold text-gray-900 mb-2">Download Information</h3>
                                <div class="space-y-2 text-sm">
                                    <p><strong>Download URL:</strong> <a href="${link.downloadUrl}" target="_blank" class="text-blue-600 hover:text-blue-800 break-all">${link.downloadUrl}</a></p>
                                    <p><strong>Total Downloads:</strong> ${link.downloadCount || 0}</p>
                                    <p><strong>Created:</strong> ${formatDate(link.createdAt)}</p>
                                    <p><strong>Last Updated:</strong> ${formatDate(link.updatedAt)}</p>
                                </div>
                            </div>
                            <div class="flex space-x-2">
                                <button onclick="downloadLink('${link._id}')" class="flex-1 bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors">
                                    Download Link
                                </button>
                                <button onclick="showEditLinkModal('${link._id}')" class="flex-1 bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700 transition-colors">
                                    Edit Link
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(modal);
    }

    function showFileDetails(fileId) {
        const file = files.find(f => f._id === fileId);
        if (!file) return;

        const category = categories.find(c => c._id === file.categoryId);
        const fileIcon = getFileIcon(file);
        const bgColor = file.type === 'url' ? 'bg-purple-100' : 'bg-gray-100';

        // Create modal
        const modal = document.createElement('div');
        modal.className = 'fixed inset-0 z-50 flex items-center justify-center p-4 bg-gray-900/50 backdrop-blur-sm';
        modal.innerHTML = `
            <div class="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto shadow-2xl">
                <div class="sticky top-0 bg-gray-50 border-b border-gray-200 p-4 z-10">
                    <div class="flex items-center justify-between">
                        <h2 class="text-2xl font-bold text-gray-900">File Details</h2>
                        <button onclick="this.closest('.fixed').remove()" class="text-gray-600 hover:text-gray-900 p-2 rounded-full hover:bg-gray-100 transition-colors">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                </div>
                <div class="p-6 space-y-6">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div class="space-y-4">
                            <div>
                                <h3 class="text-lg font-semibold text-gray-900 mb-2">Basic Information</h3>
                                <div class="space-y-2 text-sm">
                                    <div class="flex items-center space-x-3">
                                        <div class="w-10 h-10 ${bgColor} rounded-lg flex items-center justify-center">
                                            ${fileIcon}
                                        </div>
                                        <div>
                                            <p><strong>Name:</strong> ${file.originalName || file.filename}</p>
                                            <p><strong>Type:</strong> ${file.type === 'url' ? 'Link' : 'File'}</p>
                                        </div>
                                    </div>
                                    <p><strong>Category:</strong> ${category ? category.name : 'Uncategorized'}</p>
                                    ${file.description ? `<p><strong>Description:</strong> ${file.description}</p>` : ''}
                                    ${file.type === 'url' && file.url ? `<p><strong>URL:</strong> <a href="${file.url}" target="_blank" class="text-blue-600 hover:text-blue-800 break-all">${file.url}</a></p>` : ''}
                                </div>
                            </div>
                        </div>
                        <div class="space-y-4">
                            <div>
                                <h3 class="text-lg font-semibold text-gray-900 mb-2">File Information</h3>
                                <div class="space-y-2 text-sm">
                                    ${file.size ? `<p><strong>Size:</strong> ${formatBytes(file.size)}</p>` : ''}
                                    <p><strong>Uploaded:</strong> ${formatDate(file.uploadedAt)}</p>
                                    <p><strong>Downloads:</strong> ${file.downloadCount || 0}</p>
                                    <p><strong>Created:</strong> ${formatDate(file.createdAt)}</p>
                                    <p><strong>Last Updated:</strong> ${formatDate(file.updatedAt)}</p>
                                </div>
                            </div>
                            <div class="flex space-x-2">
                                <button onclick="downloadFile('${file._id}')" class="flex-1 bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors">
                                    Download
                                </button>
                                <button onclick="editFileMetadata('${file._id}')" class="flex-1 bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700 transition-colors">
                                    Edit Metadata
                                </button>
                                <button onclick="deleteFile('${file._id}')" class="flex-1 bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700 transition-colors">
                                    Delete
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(modal);
    }

    function downloadLink(linkId) {
        const link = links.find(l => l._id === linkId);
        if (!link) return;

        // Open URL in new tab and track download
        window.open(link.downloadUrl, '_blank');
        trackDownload(linkId);
        showToast('Link opened in new tab', 'success');
    }

    async function trackDownload(linkId) {
        try {
            const token = getAuthToken();
            if (!token) return;

            // Track download - POST /api/links/:id/download
            await fetch(`/api/links/${linkId}/download`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
        } catch (error) {
            console.error('Error tracking download:', error);
        }
    }

    function editFileMetadata(fileId) {
        const file = files.find(f => f._id === fileId);
        if (!file) return;

        // Create edit modal
        const modal = document.createElement('div');
        modal.className = 'fixed inset-0 z-50 flex items-center justify-center p-4 bg-gray-900/50 backdrop-blur-sm';
        modal.innerHTML = `
            <div class="bg-white rounded-lg max-w-md w-full shadow-2xl">
                <div class="bg-gray-50 border-b border-gray-200 p-4">
                    <div class="flex items-center justify-between">
                        <h2 class="text-xl font-bold text-gray-900">Edit File Metadata</h2>
                        <button onclick="this.closest('.fixed').remove()" class="text-gray-600 hover:text-gray-900 p-2 rounded-full hover:bg-gray-100 transition-colors">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                </div>
                <div class="p-6 space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">
                            Display Name
                        </label>
                        <input
                            type="text"
                            id="edit-original-name"
                            value="${file.originalName || file.filename}"
                            class="w-full px-3 py-2 border border-gray-300 rounded-lg text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                            placeholder="Enter display name..."
                        />
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">
                            Description
                        </label>
                        <textarea
                            id="edit-description"
                            rows="3"
                            class="w-full px-3 py-2 border border-gray-300 rounded-lg text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                            placeholder="Enter description..."
                        >${file.description || ''}</textarea>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">
                            Category
                        </label>
                        <select id="edit-category" class="w-full px-3 py-2 border border-gray-300 rounded-lg text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <option value="">No category</option>
                            ${Array.isArray(categories) ? categories.map(cat =>
            `<option value="${cat._id}" ${file.categoryId === cat._id ? 'selected' : ''}>${cat.name}</option>`
        ).join('') : ''}
                        </select>
                    </div>
                    <div class="flex justify-end space-x-3 pt-4 border-t border-gray-200">
                        <button onclick="this.closest('.fixed').remove()" class="px-4 py-2 bg-gray-100 text-gray-900 border border-gray-200 rounded-md hover:bg-gray-200 transition-colors">
                            Cancel
                        </button>
                        <button onclick="saveFileMetadata('${fileId}')" class="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
                            Save Changes
                        </button>
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(modal);
    }

    async function saveFileMetadata(fileId) {
        const originalName = document.getElementById('edit-original-name').value.trim();
        const description = document.getElementById('edit-description').value.trim();
        const categoryId = document.getElementById('edit-category').value;

        if (!originalName && !description && !categoryId) {
            showToast('Please provide at least one field to update', 'error');
            return;
        }

        const updateData = {};
        if (originalName) updateData.originalName = originalName;
        if (description) updateData.description = description;
        if (categoryId) updateData.categoryId = categoryId;

        try {
            const token = getAuthToken();
            if (!token) {
                showToast('Authentication required', 'error');
                return;
            }

            const response = await fetch(`/api/files/${fileId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify(updateData)
            });

            if (response.ok) {
                // Close modal
                document.querySelector('.fixed').remove();
                // Refresh files
                await loadFiles();
                showToast('File metadata updated successfully', 'success');
            } else {
                const errorData = await response.json().catch(() => ({}));
                throw new Error(errorData.message || 'Update failed');
            }
        } catch (error) {
            console.error('Error updating file metadata:', error);
            showToast('Error updating file metadata: ' + error.message, 'error');
        }
    }







    function downloadFile(fileId) {
        const file = files.find(f => f._id === fileId);
        if (!file) return;

        if (file.type === 'url') {
            // Open URL in new tab
            window.open(file.url, '_blank');
            showToast('Link opened in new tab', 'success');
        } else {
            // Download file
            const link = document.createElement('a');
            link.href = `/api/files/download/${fileId}`;
            link.download = file.filename;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            showToast('Download started', 'success');
        }
    }


    function handleFileDrop(event) {
        event.preventDefault();
        const files = Array.from(event.dataTransfer.files);
        handleFileSelection(files);
    }

    function renderFileList() {
        const fileList = document.getElementById('file-list');
        if (!fileList) return;

        fileList.innerHTML = '';

        if (uploadFileList.length === 0) {
            fileList.innerHTML = '<p class="text-gray-500 text-center py-4">No files selected</p>';
            return;
        }

        uploadFileList.forEach((fileWithId, index) => {
            const fileItem = document.createElement('div');
            fileItem.className = 'flex items-center justify-between p-2 bg-gray-50 rounded-lg border border-gray-200';
            fileItem.setAttribute('data-upload-id', fileWithId.id);
            fileItem.setAttribute('data-file-name', fileWithId.file.name);
            fileItem.innerHTML = `
                <div class="flex items-center space-x-2 flex-1 min-w-0">
                    <div class="w-6 h-6 bg-blue-100 rounded flex items-center justify-center flex-shrink-0">
                        <svg class="w-3 h-3 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                    </div>
                    <div class="flex-1 min-w-0">
                        <p class="text-sm font-medium text-gray-900 truncate" title="${fileWithId.file.name}">${fileWithId.file.name}</p>
                        <p class="text-xs text-gray-500">${formatBytes(fileWithId.file.size)}</p>
                    </div>
                </div>
                <button onclick="removeFileFromList('${fileWithId.id}')" class="text-red-500 hover:text-red-700 p-1 rounded hover:bg-red-50 transition-colors flex-shrink-0" title="Remove file">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            `;
            fileList.appendChild(fileItem);
        });
    }

    function removeFileFromList(uploadId) {
        const index = uploadFileList.findIndex(item => item.id === uploadId);
        if (index >= 0) {
            uploadFileList.splice(index, 1);
            renderFileList();
            updateUploadButton();
        }
    }


    function updateUploadButton() {
        const uploadBtn = document.getElementById('upload-btn');
        const uploadBtnText = document.getElementById('upload-btn-text');

        if (uploadMode === 'file') {
            const hasFiles = uploadFileList.length > 0;
            uploadBtn.disabled = !hasFiles;
            uploadBtnText.textContent = hasFiles ? `Upload ${uploadFileList.length} file${uploadFileList.length !== 1 ? 's' : ''}` : 'Upload';
        } else {
            const hasUrl = document.getElementById('url-input').value.trim() !== '';
            uploadBtn.disabled = !hasUrl;
            uploadBtnText.textContent = 'Upload Link';
        }
    }

    // Enhanced upload functionality
    async function uploadFiles() {
        const uploadBtn = document.getElementById('upload-btn');
        const uploadBtnText = document.getElementById('upload-btn-text');
        const progressContainer = document.getElementById('upload-progress');
        const progressBar = document.getElementById('upload-progress-bar');
        const progressText = document.getElementById('upload-progress-text');

        uploadBtn.disabled = true;
        uploadBtnText.textContent = 'Uploading...';
        progressContainer.classList.remove('hidden');

        try {
            if (uploadMode === 'file') {
                await uploadFileMode();
            } else {
                await uploadUrlMode();
            }

            showToast('Upload completed successfully!', 'success');
            hideUploadModal();
            loadFiles(); // Refresh the file list
            loadLinks(); // Refresh the links list
        } catch (error) {
            console.error('Upload error:', {
                mode: uploadMode,
                error: error.message,
                stack: error.stack,
                fileListLength: uploadMode === 'file' ? uploadFileList.length : 0,
                url: uploadMode === 'url' ? document.getElementById('url-input').value : null
            });
            showToast('Upload failed: ' + error.message, 'error');
        } finally {
            console.log('Upload completed:', {
                mode: uploadMode,
                success: true,
                timestamp: new Date().toISOString()
            });
            uploadBtn.disabled = false;
            uploadBtnText.textContent = uploadMode === 'file' ? 'Upload' : 'Upload Link';
            progressContainer.classList.add('hidden');
            if (progressBar) progressBar.style.width = '0%';
            if (progressText) progressText.textContent = '0%';
        }
    }

    // Enhanced file selection handler
    function handleFileSelection(selectedFiles) {
        if (!selectedFiles || selectedFiles.length === 0) return;

        const newFiles = Array.from(selectedFiles);
        console.log('File selection:', {
            previousCount: uploadFileList.length,
            newCount: newFiles.length,
            totalCount: uploadFileList.length + newFiles.length,
            files: newFiles.map(f => ({ name: f.name, size: f.size, type: f.type }))
        });

        // Add unique IDs to new files
        const filesWithIds = newFiles.map(file => ({
            file,
            id: Date.now() + Math.random().toString(36).substr(2, 9)
        }));

        uploadFileList = [...uploadFileList, ...filesWithIds];
        renderFileList();
        updateUploadButton();

        if (newFiles.length > 0) {
            showToast(`${newFiles.length} file(s) added to upload queue`, 'success');
        }
    }


    async function uploadFileMode() {
        const token = getAuthToken();
        console.log('=== FRONTEND UPLOAD DEBUG ===');
        console.log('Token from getAuthToken():', token ? 'PRESENT' : 'MISSING');
        console.log('Token length:', token?.length || 0);
        console.log('localStorage token:', localStorage.getItem('authToken') ? 'PRESENT' : 'MISSING');
        console.log('Cookie token:', getCookie('token') ? 'PRESENT' : 'MISSING');

        if (!token) {
            console.error('No authentication token found');
            console.error('localStorage token:', localStorage.getItem('authToken'));
            console.error('Available cookies:', document.cookie);
            throw new Error('Authentication required');
        }

        console.log('Token preview:', token.substring(0, 20) + '...');

        // Validate files before upload
        if (!uploadFileList || uploadFileList.length === 0) {
            throw new Error('No files selected for upload');
        }

        // Check if files are still valid (not removed from list)
        const validFiles = uploadFileList.filter(item => item && item.file && item.file.name && item.file.size >= 0);
        if (validFiles.length !== uploadFileList.length) {
            throw new Error('Some selected files are no longer valid. Please select files again.');
        }

        const categoryId = document.getElementById('upload-category').value;
        const description = document.getElementById('upload-description').value;
        let successCount = 0;
        let errorCount = 0;
        const progressBar = document.getElementById('upload-progress-bar');
        const progressText = document.getElementById('upload-progress-text');

        console.log('Starting file upload:', {
            fileCount: uploadFileList.length,
            categoryId: categoryId,
            description: description,
            files: uploadFileList.map(f => ({ name: f.file.name, size: f.file.size, type: f.file.type }))
        });

        for (let i = 0; i < uploadFileList.length; i++) {
            const fileWithId = uploadFileList[i];
            const file = fileWithId.file;
            const uploadId = fileWithId.id;
            const progress = ((i + 1) / uploadFileList.length) * 100;

            console.log(`Uploading file ${i + 1}/${uploadFileList.length}:`, {
                name: file.name,
                size: file.size,
                type: file.type,
                uploadId: uploadId,
                progress: `${Math.round(progress)}%`
            });

            // Update overall progress
            if (progressBar) progressBar.style.width = `${progress}%`;
            if (progressText) progressText.textContent = `${Math.round(progress)}%`;

            try {
                const formData = new FormData();
                formData.append('file', file);

                if (categoryId) {
                    formData.append('categoryId', categoryId);
                }

                if (description) {
                    formData.append('description', description);
                }

                const response = await fetch('/api/files/upload', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    },
                    body: formData
                });

                if (response.ok) {
                    successCount++;
                    const result = await response.json().catch(() => ({}));
                    console.log(`Upload successful for ${file.name}:`, result);
                    showToast(`${file.name} uploaded successfully`, 'success');
                } else {
                    let errorMessage = `Upload failed for ${file.name}`;
                    try {
                        const errorData = await response.json();
                        errorMessage = errorData.message || errorData.error || errorMessage;
                        console.error(`Upload failed for ${file.name}:`, {
                            status: response.status,
                            statusText: response.statusText,
                            errorData: errorData
                        });

                        // Add specific error context based on status code
                        if (response.status === 413) {
                            errorMessage = `File ${file.name} is too large. Please choose a smaller file.`;
                        } else if (response.status === 415) {
                            errorMessage = `File ${file.name} has an unsupported format.`;
                        } else if (response.status === 401) {
                            errorMessage = `Authentication failed. Please log in again.`;
                        } else if (response.status === 403) {
                            errorMessage = `You don't have permission to upload files.`;
                        }
                    } catch (parseError) {
                        // If response is not JSON, use status text
                        errorMessage = `Upload failed for ${file.name} (${response.status}: ${response.statusText})`;
                        console.error(`Upload failed for ${file.name} (non-JSON response):`, {
                            status: response.status,
                            statusText: response.statusText,
                            parseError: parseError.message
                        });
                    }
                    throw new Error(errorMessage);
                }
            } catch (error) {
                errorCount++;
                console.error(`Error uploading ${file.name}:`, {
                    error: error.message,
                    stack: error.stack,
                    file: { name: file.name, size: file.size, type: file.type }
                });
                showToast(`Failed to upload ${file.name}: ${error.message}`, 'error');
            }
        }

        // Show summary
        if (successCount > 0) {
            showToast(`Successfully uploaded ${successCount} file(s)`, 'success');
        }
        if (errorCount > 0) {
            showToast(`${errorCount} file(s) failed to upload`, 'error');
        }

        // Clear the file list
        uploadFileList = [];
        renderFileList();
    }


    async function uploadUrlMode() {
        const token = getAuthToken();
        if (!token) {
            throw new Error('Authentication required. Please log in again.');
        }

        const url = document.getElementById('url-input').value.trim();
        const categoryId = document.getElementById('upload-category').value;
        const description = document.getElementById('upload-description').value;

        // Check for empty URL
        if (!url) {
            throw new Error('Please enter a URL');
        }

        // Check URL length (reasonable limit like 2048 characters)
        if (url.length > 2048) {
            throw new Error('URL is too long. Please use a shorter URL (max 2048 characters)');
        }

        // Validate URL format
        let urlObject;
        try {
            urlObject = new URL(url);
        } catch (urlError) {
            throw new Error('Please enter a valid URL (e.g., https://example.com/file)');
        }

        // Check for valid protocols
        if (!['http:', 'https:'].includes(urlObject.protocol)) {
            throw new Error('URL must use HTTP or HTTPS protocol');
        }

        // Extract name from URL or use default
        let name = url.split('/').pop().split('?')[0];
        if (!name || name.length === 0) {
            name = urlObject.hostname;
        }

        // Default version and platform
        const version = '1.0.0';
        const platform = 'Universal';

        const uploadData = {
            url: url,
            name: name,
            version: version,
            platform: platform,
            categoryId: categoryId || undefined,
            description: description || undefined
        };

        const response = await fetch('/api/links', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({
                name: uploadData.name,
                version: uploadData.version,
                downloadUrl: uploadData.url,
                description: uploadData.description,
                categoryId: uploadData.categoryId,
                platform: uploadData.platform
            })
        });

        if (!response.ok) {
            let errorMessage = 'URL upload failed';
            try {
                const errorData = await response.json();
                errorMessage = errorData.message || errorData.error || errorMessage;

                // Add specific error context based on status code
                if (response.status === 413) {
                    errorMessage = 'URL content is too large to process';
                } else if (response.status === 415) {
                    errorMessage = 'URL content type is not supported';
                } else if (response.status === 401) {
                    errorMessage = 'Authentication failed. Please log in again.';
                } else if (response.status === 403) {
                    errorMessage = 'You don\'t have permission to upload URLs';
                } else if (response.status === 429) {
                    errorMessage = 'Too many upload requests. Please wait a moment and try again.';
                }
            } catch (parseError) {
                // If response is not JSON, use status text
                errorMessage = `URL upload failed (${response.status}: ${response.statusText})`;
            }
            throw new Error(errorMessage);
        }

        const result = await response.json();
        showToast(`Link "${result.filename || url}" uploaded successfully`, 'success');

        // Clear the URL input
        document.getElementById('url-input').value = '';
    }

</script>