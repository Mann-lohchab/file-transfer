<div class="min-h-screen bg-white p-4">
    <div class="max-w-7xl mx-auto">
        <!-- Header -->
        <div class="flex items-center justify-between mb-6">
            <div>
                <h1 class="text-3xl font-bold text-gray-900">Admin File Management</h1>
                <p class="text-gray-600 mt-1">Manage files, categories, and system settings</p>
            </div>
            <div class="flex items-center space-x-4">
                <button
                    onclick="window.location.href='/admin-links'"
                    class="inline-flex items-center space-x-2 px-4 py-2 bg-gray-100 text-gray-900 border border-gray-200 rounded-md hover:bg-gray-200 transition-colors"
                >
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                    </svg>
                    <span>Manage Links</span>
                </button>
                <div class="flex space-x-2">
                    <button onclick="showUploadModal()" class="inline-flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                        </svg>
                        <span>Upload Files</span>
                    </button>
                    <button onclick="quickUploadFile()" class="inline-flex items-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                        </svg>
                        <span>Quick Upload</span>
                    </button>
                </div>
                <button onclick="toggleStats()" class="inline-flex items-center space-x-2 px-4 py-2 bg-gray-100 text-gray-900 border border-gray-200 rounded-md hover:bg-gray-200 transition-colors">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                    </svg>
                    <span>Stats</span>
                </button>
                <div class="relative">
                    <svg class="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                    </svg>
                    <input
                        type="text"
                        id="search-input"
                        placeholder="Search files..."
                        class="pl-10 pr-4 py-2 bg-white border border-gray-300 rounded-lg text-gray-900 placeholder-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-transparent w-64"
                    />
                </div>
                <div id="bulk-actions" class="hidden flex items-center space-x-2 bg-red-50 text-red-700 px-3 py-1 rounded">
                    <span id="selected-count">0</span> selected
                    <select id="bulk-action" class="bg-transparent border-none text-red-700">
                        <option value="">Actions</option>
                        <option value="move">Move to category</option>
                        <option value="delete">Delete</option>
                    </select>
                    <button onclick="applyBulkAction()" class="px-3 py-1 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors text-sm">
                        Apply
                    </button>
                </div>
            </div>
        </div>

        <!-- Categories and Files -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <% if (typeof categories !== 'undefined') { %>
                <% categories.forEach(function(category) { %>
                <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-shadow">
                    <!-- Category Header -->
                    <div class="bg-gradient-to-r from-blue-50 to-indigo-50 border-b border-gray-200 p-4">
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-3">
                                <div class="w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center">
                                    <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z" />
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5a2 2 0 012-2h2a2 2 0 012 2v2H8V5z" />
                                    </svg>
                                </div>
                                <div>
                                    <h2 class="text-lg font-semibold text-gray-900"><%= category.name %></h2>
                                    <p class="text-sm text-gray-600"><%= category.description %></p>
                                </div>
                            </div>
                            <div class="flex items-center space-x-2 text-sm text-gray-600">
                                <button onclick="selectAllInCategory('<%= category._id %>')" class="p-1 hover:bg-gray-200 rounded transition-colors" title="Select all files in this category">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                                    </svg>
                                </button>
                                <span id="file-count-<%= category._id %>" class="font-medium">0</span> files
                            </div>
                        </div>
                        <!-- Sorting Headers -->
                        <div class="flex space-x-4 mt-3 text-xs text-gray-600">
                            <button onclick="handleSort('originalName', '<%= category._id %>')" class="flex items-center space-x-1 hover:text-gray-900 transition-colors">
                                <span>Name</span>
                                <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                                </svg>
                            </button>
                            <button onclick="handleSort('uploadedAt', '<%= category._id %>')" class="flex items-center space-x-1 hover:text-gray-900 transition-colors">
                                <span>Date</span>
                                <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                                </svg>
                            </button>
                            <button onclick="handleSort('size', '<%= category._id %>')" class="flex items-center space-x-1 hover:text-gray-900 transition-colors">
                                <span>Size</span>
                                <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                                </svg>
                            </button>
                        </div>
                    </div>

                    <!-- Files List -->
                    <div class="p-4 space-y-3 max-h-96 overflow-y-auto" id="files-container-<%= category._id %>">
                        <div id="files-<%= category._id %>" class="space-y-3">
                            <!-- Files will be loaded here -->
                        </div>
                    </div>
                </div>
                <% }); %>
            <% } %>
        </div>

        <!-- Stats Sidebar -->
        <div id="stats-sidebar" class="hidden fixed right-0 top-0 h-full w-80 bg-white border-l border-gray-200 shadow-lg z-50 overflow-y-auto">
            <div class="p-4 border-b border-gray-200">
                <div class="flex items-center justify-between">
                    <h2 class="text-xl font-semibold text-gray-900">Statistics</h2>
                    <button onclick="toggleStats()" class="p-1 rounded-md hover:bg-gray-100 transition-colors">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>
            </div>
            <div class="p-4 space-y-6">
                <div>
                    <h3 class="text-lg font-medium text-gray-900 mb-4">Category Distribution</h3>
                    <canvas id="pie-chart" width="300" height="200"></canvas>
                </div>
                <div>
                    <h3 class="text-lg font-medium text-gray-900 mb-4">File Sizes</h3>
                    <canvas id="bar-chart" width="300" height="200"></canvas>
                </div>
                <div class="text-sm text-gray-600 space-y-1">
                    <p>Total Files: <span id="total-files">0</span></p>
                    <p>Total Size: <span id="total-size">0</span></p>
                    <p>Average Downloads: <span id="avg-downloads">0</span></p>
                </div>
            </div>
        </div>

        <!-- Upload Modal -->
        <div id="upload-modal" class="hidden fixed inset-0 z-50 flex items-center justify-center p-4 bg-gray-900/50 backdrop-blur-sm">
            <div class="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto shadow-2xl">
                <div class="sticky top-0 bg-gray-50 border-b border-gray-200 p-4 z-10">
                    <div class="flex items-center justify-between">
                        <h2 class="text-2xl font-bold text-gray-900">Upload Files & Links</h2>
                        <button onclick="hideUploadModal()" class="text-gray-600 hover:text-gray-900 p-2 rounded-full hover:bg-gray-100 transition-colors">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                </div>
                <div class="p-6 space-y-6">
                    <!-- Upload Mode Tabs -->
                    <div class="flex space-x-1 bg-gray-100 rounded-lg p-1">
                        <button id="file-mode-btn" class="flex-1 px-4 py-2 text-sm font-medium rounded-md transition-colors bg-white text-gray-900 shadow-sm">
                            Upload Files
                        </button>
                        <button id="url-mode-btn" class="flex-1 px-4 py-2 text-sm font-medium rounded-md transition-colors text-gray-600 hover:text-gray-900">
                            Upload Link
                        </button>
                    </div>

                    <!-- File Upload Tab -->
                    <div id="file-upload-tab">
                        <div class="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-blue-500 transition-colors" 
                             ondrop="handleFileDrop(event)" 
                             ondragover="event.preventDefault()" 
                             onclick="document.getElementById('file-input').click()">
                            <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                            </svg>
                            <p class="text-lg text-gray-900 mb-2">Drag and drop files here, or click to select</p>
                            <p class="text-sm text-gray-500 mb-4">Supports any file type up to 100MB per file</p>
                            <input type="file" multiple id="file-input" class="hidden" accept="*">
                            <label for="file-input" class="cursor-pointer bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors inline-flex items-center space-x-2">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                                </svg>
                                <span>Select Files</span>
                            </label>
                        </div>
                        <div id="file-list" class="space-y-2 mt-4"></div>
                    </div>

                    <!-- URL Upload Tab -->
                    <div id="url-upload-tab" class="hidden space-y-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Download URL *
                            </label>
                            <input
                                type="url"
                                id="url-input"
                                placeholder="https://example.com/download/yourfile"
                                class="w-full px-3 py-2 border border-gray-300 rounded-lg text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                required
                            />
                            <p class="text-sm text-gray-600 mt-1">
                                Enter the direct download URL for the file you want to share
                            </p>
                        </div>
                    </div>

                    <!-- Category and Description Selection -->
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Category (optional)
                            </label>
                            <select id="upload-category" class="w-full px-3 py-2 border border-gray-300 rounded-lg text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                <option value="">No category</option>
                                <% if (typeof categories !== 'undefined') { %>
                                    <% categories.forEach(function(category) { %>
                                    <option value="<%= category._id %>"><%= category.name %></option>
                                    <% }); %>
                                <% } %>
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Description (optional)
                            </label>
                            <input
                                type="text"
                                id="upload-description"
                                placeholder="Brief description..."
                                class="w-full px-3 py-2 border border-gray-300 rounded-lg text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                            />
                        </div>
                    </div>

                    <!-- Upload Progress -->
                    <div id="upload-progress" class="hidden">
                        <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                            <div class="flex items-center justify-between mb-2">
                                <span class="text-sm font-medium text-blue-900">Uploading files...</span>
                                <span class="text-sm text-blue-700" id="upload-progress-text">0%</span>
                            </div>
                            <div class="w-full bg-blue-200 rounded-full h-2">
                                <div id="upload-progress-bar" class="bg-blue-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Action Buttons -->
                    <div class="flex justify-end space-x-3 pt-4 border-t border-gray-200">
                        <button onclick="hideUploadModal()" class="px-4 py-2 bg-gray-100 text-gray-900 border border-gray-200 rounded-md hover:bg-gray-200 transition-colors">
                            Cancel
                        </button>
                        <button onclick="uploadFiles()" id="upload-btn" class="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                            </svg>
                            <span id="upload-btn-text">Upload</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Bulk Move Modal -->
        <div id="bulk-move-modal" class="hidden fixed inset-0 z-50 flex items-center justify-center p-4 bg-gray-900/50 backdrop-blur-sm">
            <div class="bg-white rounded-lg max-w-md w-full shadow-2xl">
                <div class="bg-gray-50 border-b border-gray-200 p-4">
                    <div class="flex items-center justify-between">
                        <h2 class="text-xl font-bold text-gray-900">Move Files</h2>
                        <button onclick="hideBulkMoveModal()" class="text-gray-600 hover:text-gray-900 p-2 rounded-full hover:bg-gray-100 transition-colors">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                </div>
                <div class="p-6 space-y-4">
                    <div>
                        <p class="text-sm text-gray-600 mb-4">
                            Move <span id="bulk-move-count" class="font-medium text-gray-900">0</span> selected file(s) to:
                        </p>
                        <select id="bulk-move-category" class="w-full px-3 py-2 border border-gray-300 rounded-lg text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <option value="">Select a category...</option>
                            <% if (typeof categories !== 'undefined') { %>
                                <% categories.forEach(function(category) { %>
                                <option value="<%= category._id %>"><%= category.name %></option>
                                <% }); %>
                            <% } %>
                        </select>
                    </div>
                    <div class="flex justify-end space-x-3 pt-4 border-t border-gray-200">
                        <button onclick="hideBulkMoveModal()" class="px-4 py-2 bg-gray-100 text-gray-900 border border-gray-200 rounded-md hover:bg-gray-200 transition-colors">
                            Cancel
                        </button>
                        <button onclick="executeBulkMove()" id="bulk-move-btn" class="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
                            Move Files
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Global state
    let categories = [];
    let files = [];
    let selectedFiles = new Set();
    let uploadMode = 'file';
    let uploadFileList = [];
    let sortConfig = { key: null, direction: 'asc' };
    let searchTerm = '';
    let stats = null;

    // Helper function to get cookie value
    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
        return null;
    }

    // Toast notification system
    function showToast(message, type = 'info', duration = 5000) {
        // Create toast container if it doesn't exist
        let container = document.getElementById('toast-container');
        if (!container) {
            container = document.createElement('div');
            container.id = 'toast-container';
            container.className = 'fixed top-4 right-4 z-50 space-y-2';
            document.body.appendChild(container);
        }

        const toast = document.createElement('div');
        const bgColor = type === 'error' ? 'bg-red-50 border-red-200' :
                       type === 'success' ? 'bg-green-50 border-green-200' :
                       type === 'warning' ? 'bg-yellow-50 border-yellow-200' :
                       'bg-blue-50 border-blue-200';

        const textColor = type === 'error' ? 'text-red-700' :
                         type === 'success' ? 'text-green-700' :
                         type === 'warning' ? 'text-yellow-700' :
                         'text-blue-700';

        toast.className = `max-w-md p-4 border rounded-lg ${bgColor} shadow-lg transform transition-all duration-300 translate-x-full`;
        toast.innerHTML = `
            <div class="flex items-center">
                <div class="flex-shrink-0">
                    ${type === 'error' ? '❌' : type === 'success' ? '✅' : type === 'warning' ? '⚠️' : 'ℹ️'}
                </div>
                <div class="ml-3">
                    <p class="${textColor} font-medium">${message}</p>
                </div>
                <div class="ml-auto pl-3">
                    <button onclick="this.parentElement.parentElement.parentElement.remove()" class="text-gray-400 hover:text-gray-600">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>
            </div>
        `;

        container.appendChild(toast);

        // Animate in
        setTimeout(() => {
            toast.classList.remove('translate-x-full');
        }, 100);

        // Auto remove
        setTimeout(() => {
            toast.classList.add('translate-x-full');
            setTimeout(() => {
                if (toast.parentElement) {
                    toast.remove();
                }
            }, 300);
        }, duration);
    }

    // Utility functions
    function formatBytes(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    function formatDate(dateString) {
        return new Date(dateString).toLocaleDateString('en-US', { 
            year: 'numeric', 
            month: 'short', 
            day: 'numeric' 
        });
    }

    // Initialize page
    document.addEventListener('DOMContentLoaded', function() {
        loadCategories();
        loadFiles();
        setupEventListeners();
        loadStats();
    });

    // Load categories
    async function loadCategories() {
        try {
            const token = getCookie('token');
            if (!token) {
                console.error('No authentication token found');
                showToast('Authentication required. Please log in again.', 'error');
                return;
            }
            
            const response = await fetch('/api/categories', {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            
            if (!response.ok) {
                throw new Error(`Failed to load categories: ${response.status}`);
            }
            
            categories = await response.json();
            renderCategories();
        } catch (error) {
            console.error('Error loading categories:', error);
            showToast('Failed to load categories', 'error');
        }
    }

    // Load files
    async function loadFiles() {
        try {
            const token = getCookie('token');
            if (!token) {
                console.error('No authentication token found');
                showToast('Authentication required. Please log in again.', 'error');
                return;
            }
            
            const response = await fetch('/api/files', {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            
            if (!response.ok) {
                throw new Error(`Failed to load files: ${response.status}`);
            }
            
            files = await response.json();
            renderFiles();
            loadStats(); // Update stats after loading files
        } catch (error) {
            console.error('Error loading files:', error);
            showToast('Failed to load files', 'error');
        }
    }

    // Render categories
    function renderCategories() {
        // Update category dropdowns
        const uploadCategory = document.getElementById('upload-category');
        uploadCategory.innerHTML = '<option value="">No category</option>';
        categories.forEach(category => {
            const option = document.createElement('option');
            option.value = category._id;
            option.textContent = category.name;
            uploadCategory.appendChild(option);
        });
    }

    // Render files
    function renderFiles() {
        console.log('Rendering files:', {
            filesLength: files.length,
            categoriesLength: categories.length,
            sampleFile: files[0] ? { id: files[0]._id, categoryId: files[0].categoryId, categoryIdType: typeof files[0].categoryId } : 'no files',
            sampleCategory: categories[0] ? { id: categories[0]._id, idType: typeof categories[0]._id } : 'no categories'
        });

        categories.forEach(category => {
            // Fix category ID comparison by converting both to strings
            const categoryFiles = files.filter(file => file.categoryId?.toString() === category._id.toString());
            const container = document.getElementById(`files-${category._id}`);
            const countElement = document.getElementById(`file-count-${category._id}`);

            console.log(`Category ${category.name}: ${categoryFiles.length} files`);

            if (container) {
                container.innerHTML = '';
                if (categoryFiles.length === 0) {
                    // Show empty state for categories with no files
                    container.innerHTML = '<p class="text-gray-500 text-center py-8 text-sm">No files in this category</p>';
                } else {
                    categoryFiles.forEach(file => {
                        const fileElement = createFileElement(file, category._id);
                        container.appendChild(fileElement);
                    });
                }
            }

            if (countElement) {
                countElement.textContent = categoryFiles.length;
            }
        });

        updateBulkActionsVisibility();
    }

    // Create file element
    function createFileElement(file, categoryId) {
        const div = document.createElement('div');
        div.className = `bg-white rounded-lg p-3 border border-gray-200 hover:shadow-md transition-all cursor-pointer ${
            selectedFiles.has(file._id) ? 'ring-2 ring-blue-500 ring-offset-2' : ''
        }`;
        div.setAttribute('data-file-id', file._id);
        div.setAttribute('data-category-id', categoryId);
        
        // Get file extension for icon selection
        const getFileExtension = (filename) => {
            return filename.split('.').pop().toLowerCase();
        };

        const getFileIcon = (file) => {
            if (file.type === 'url') {
                return `<svg class="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                </svg>`;
            }

            const ext = getFileExtension(file.originalName || file.filename);
            const iconClass = "w-5 h-5";

            switch (ext) {
                case 'pdf':
                    return `<svg class="${iconClass} text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
                    </svg>`;
                case 'exe':
                    return `<svg class="${iconClass} text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                    </svg>`;
                case 'txt':
                    return `<svg class="${iconClass} text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>`;
                case 'jpg':
                case 'jpeg':
                case 'png':
                case 'gif':
                case 'bmp':
                    return `<svg class="${iconClass} text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>`;
                case 'zip':
                case 'rar':
                case '7z':
                    return `<svg class="${iconClass} text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4" />
                    </svg>`;
                default:
                    return `<svg class="${iconClass} text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>`;
            }
        };

        const fileIcon = getFileIcon(file);

        const bgColor = file.type === 'url' ? 'bg-purple-100' : 'bg-gray-100';
        
        div.innerHTML = `
            <div class="flex items-start space-x-3">
                <button onclick="event.stopPropagation(); toggleFileSelection('${file._id}')" class="flex-shrink-0 mt-1">
                    <svg class="w-5 h-5 ${selectedFiles.has(file._id) ? 'text-blue-600' : 'text-gray-400'}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                    </svg>
                </button>
                <div class="flex-shrink-0 w-10 h-10 ${bgColor} rounded-lg flex items-center justify-center">
                    ${fileIcon}
                </div>
                <div class="flex-1 min-w-0" onclick="showFileDetails('${file._id}')">
                    <h3 class="font-medium text-gray-900 truncate" title="${file.originalName || file.filename}">
                        ${file.originalName || file.filename}
                    </h3>
                    <p class="text-sm text-gray-600 mt-1">
                        ${file.type === 'url' ? 'Link' : `Size: ${formatBytes(file.size)}`} • 
                        Uploaded: ${formatDate(file.uploadedAt)} • 
                        Downloads: ${file.downloadCount || 0}
                    </p>
                    ${file.description ? `<p class="text-xs text-gray-500 mt-1">${file.description}</p>` : ''}
                    ${file.type === 'url' && file.url ? `<p class="text-xs text-purple-600 mt-1 truncate" title="${file.url}">${file.url}</p>` : ''}
                </div>
                <div class="flex space-x-1">
                    <button onclick="event.stopPropagation(); downloadFile('${file._id}')" class="p-1 text-green-600 hover:text-green-800 rounded hover:bg-green-50 transition-colors" title="Download">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                    </button>
                    <button onclick="event.stopPropagation(); editFileMetadata('${file._id}')" class="p-1 text-blue-600 hover:text-blue-800 rounded hover:bg-blue-50 transition-colors" title="Edit Metadata">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                        </svg>
                    </button>
                    <button onclick="event.stopPropagation(); deleteFile('${file._id}')" class="p-1 text-red-600 hover:text-red-800 rounded hover:bg-red-50 transition-colors" title="Delete">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                        </svg>
                    </button>
                </div>
            </div>
        `;
        return div;
    }

    // Setup event listeners
    function setupEventListeners() {
        // Search
        document.getElementById('search-input').addEventListener('input', function(e) {
            const searchTerm = e.target.value.toLowerCase();
            // Filter files in real-time
            files.forEach(file => {
                const fileElements = document.querySelectorAll(`[data-file-id="${file._id}"]`);
                fileElements.forEach(element => {
                    const matches = file.originalName?.toLowerCase().includes(searchTerm) ||
                                   file.filename?.toLowerCase().includes(searchTerm) ||
                                   file.description?.toLowerCase().includes(searchTerm);
                    element.style.display = matches ? 'block' : 'none';
                });
            });
        });

        // File input
        document.getElementById('file-input').addEventListener('change', function(e) {
            handleFileSelection(e.target.files);
        });

        // Tab switching
        document.getElementById('file-mode-btn').addEventListener('click', function() {
            uploadMode = 'file';
            document.getElementById('file-upload-tab').classList.remove('hidden');
            document.getElementById('url-upload-tab').classList.add('hidden');
            this.classList.add('bg-white', 'text-gray-900', 'shadow-sm');
            document.getElementById('url-mode-btn').classList.remove('bg-white', 'text-gray-900', 'shadow-sm');
        });

        document.getElementById('url-mode-btn').addEventListener('click', function() {
            uploadMode = 'url';
            document.getElementById('file-upload-tab').classList.add('hidden');
            document.getElementById('url-upload-tab').classList.remove('hidden');
            this.classList.add('bg-white', 'text-gray-900', 'shadow-sm');
            document.getElementById('file-mode-btn').classList.remove('bg-white', 'text-gray-900', 'shadow-sm');
        });

        // URL input event listener to enable/disable upload button dynamically
        document.getElementById('url-input').addEventListener('input', function() {
            updateUploadButton();
        });
    }

    // File selection functions
    function toggleFileSelection(fileId) {
        if (selectedFiles.has(fileId)) {
            selectedFiles.delete(fileId);
        } else {
            selectedFiles.add(fileId);
        }
        updateBulkActionsVisibility();
    }

    function selectAllInCategory(categoryId) {
        const categoryFiles = files.filter(file => file.categoryId === categoryId);
        const allSelected = categoryFiles.every(file => selectedFiles.has(file._id));

        if (allSelected) {
            categoryFiles.forEach(file => selectedFiles.delete(file._id));
        } else {
            categoryFiles.forEach(file => selectedFiles.add(file._id));
        }
        updateBulkActionsVisibility();
        renderFiles();
    }

    function updateBulkActionsVisibility() {
        const bulkActions = document.getElementById('bulk-actions');
        const selectedCount = document.getElementById('selected-count');

        if (selectedFiles.size > 0) {
            bulkActions.classList.remove('hidden');
            selectedCount.textContent = selectedFiles.size;
        } else {
            bulkActions.classList.add('hidden');
        }
    }

    // Modal functions
    function showUploadModal() {
        document.getElementById('upload-modal').classList.remove('hidden');
    }

    function hideUploadModal() {
        document.getElementById('upload-modal').classList.add('hidden');

        // Reset all upload state
        uploadFileList = [];
        document.getElementById('file-input').value = '';
        document.getElementById('url-input').value = '';
        document.getElementById('upload-category').value = '';
        document.getElementById('upload-description').value = '';

        // Reset progress indicators
        const progressContainer = document.getElementById('upload-progress');
        const progressBar = document.getElementById('upload-progress-bar');
        const progressText = document.getElementById('upload-progress-text');
        const uploadBtn = document.getElementById('upload-btn');
        const uploadBtnText = document.getElementById('upload-btn-text');

        if (progressContainer) progressContainer.classList.add('hidden');
        if (progressBar) progressBar.style.width = '0%';
        if (progressText) progressText.textContent = '0%';
        if (uploadBtn) {
            uploadBtn.disabled = true;
            uploadBtnText.textContent = 'Upload';
        }

        // Reset upload mode to file
        uploadMode = 'file';
        document.getElementById('file-upload-tab').classList.remove('hidden');
        document.getElementById('url-upload-tab').classList.add('hidden');
        document.getElementById('file-mode-btn').classList.add('bg-white', 'text-gray-900', 'shadow-sm');
        document.getElementById('url-mode-btn').classList.remove('bg-white', 'text-gray-900', 'shadow-sm');

        renderFileList();
    }

    function toggleStats() {
        const sidebar = document.getElementById('stats-sidebar');
        sidebar.classList.toggle('hidden');
    }

    function showBulkMoveModal() {
        const modal = document.getElementById('bulk-move-modal');
        const countElement = document.getElementById('bulk-move-count');
        const categorySelect = document.getElementById('bulk-move-category');

        countElement.textContent = selectedFiles.size;
        categorySelect.value = '';
        modal.classList.remove('hidden');
    }

    function hideBulkMoveModal() {
        document.getElementById('bulk-move-modal').classList.add('hidden');
    }

    async function executeBulkMove() {
        const categoryId = document.getElementById('bulk-move-category').value;
        const moveBtn = document.getElementById('bulk-move-btn');

        if (!categoryId) {
            showToast('Please select a category', 'error');
            return;
        }

        moveBtn.disabled = true;
        moveBtn.textContent = 'Moving...';

        const token = getCookie('token');
        const movePromises = Array.from(selectedFiles).map(fileId =>
            fetch(`/api/files/${fileId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({ categoryId: categoryId })
            })
        );

        try {
            await Promise.all(movePromises);
            selectedFiles.clear();
            await loadFiles();
            updateBulkActionsVisibility();
            hideBulkMoveModal();
            showToast('Files moved successfully', 'success');
        } catch (error) {
            console.error('Error moving files:', error);
            showToast('Error moving files', 'error');
        } finally {
            moveBtn.disabled = false;
            moveBtn.textContent = 'Move Files';
        }
    }

    // File operations
    async function deleteFile(fileId) {
        if (confirm('Are you sure you want to delete this file?')) {
            try {
                const token = getCookie('token');
                if (!token) {
                    showToast('Authentication required', 'error');
                    return;
                }
                
                const response = await fetch(`/api/files/${fileId}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (response.ok) {
                    selectedFiles.delete(fileId);
                    await loadFiles();
                    updateBulkActionsVisibility();
                    showToast('File deleted successfully', 'success');
                } else {
                    const errorData = await response.json().catch(() => ({}));
                    throw new Error(errorData.message || 'Delete failed');
                }
            } catch (error) {
                console.error('Error deleting file:', error);
                showToast('Error deleting file: ' + error.message, 'error');
            }
        }
    }

    function editFile(fileId) {
        // TODO: Implement edit functionality
        showToast('Edit functionality coming soon', 'info');
    }

    function editFileMetadata(fileId) {
        const file = files.find(f => f._id === fileId);
        if (!file) return;

        // Create edit modal
        const modal = document.createElement('div');
        modal.className = 'fixed inset-0 z-50 flex items-center justify-center p-4 bg-gray-900/50 backdrop-blur-sm';
        modal.innerHTML = `
            <div class="bg-white rounded-lg max-w-md w-full shadow-2xl">
                <div class="bg-gray-50 border-b border-gray-200 p-4">
                    <div class="flex items-center justify-between">
                        <h2 class="text-xl font-bold text-gray-900">Edit File Metadata</h2>
                        <button onclick="this.closest('.fixed').remove()" class="text-gray-600 hover:text-gray-900 p-2 rounded-full hover:bg-gray-100 transition-colors">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                </div>
                <div class="p-6 space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">
                            Display Name
                        </label>
                        <input
                            type="text"
                            id="edit-original-name"
                            value="${file.originalName || file.filename}"
                            class="w-full px-3 py-2 border border-gray-300 rounded-lg text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                            placeholder="Enter display name..."
                        />
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">
                            Description
                        </label>
                        <textarea
                            id="edit-description"
                            rows="3"
                            class="w-full px-3 py-2 border border-gray-300 rounded-lg text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                            placeholder="Enter description..."
                        >${file.description || ''}</textarea>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">
                            Category
                        </label>
                        <select id="edit-category" class="w-full px-3 py-2 border border-gray-300 rounded-lg text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <option value="">No category</option>
                            ${categories.map(cat =>
                                `<option value="${cat._id}" ${file.categoryId === cat._id ? 'selected' : ''}>${cat.name}</option>`
                            ).join('')}
                        </select>
                    </div>
                    <div class="flex justify-end space-x-3 pt-4 border-t border-gray-200">
                        <button onclick="this.closest('.fixed').remove()" class="px-4 py-2 bg-gray-100 text-gray-900 border border-gray-200 rounded-md hover:bg-gray-200 transition-colors">
                            Cancel
                        </button>
                        <button onclick="saveFileMetadata('${fileId}')" class="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
                            Save Changes
                        </button>
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(modal);
    }

    async function saveFileMetadata(fileId) {
        const originalName = document.getElementById('edit-original-name').value.trim();
        const description = document.getElementById('edit-description').value.trim();
        const categoryId = document.getElementById('edit-category').value;

        if (!originalName && !description && !categoryId) {
            showToast('Please provide at least one field to update', 'error');
            return;
        }

        const updateData = {};
        if (originalName) updateData.originalName = originalName;
        if (description) updateData.description = description;
        if (categoryId) updateData.categoryId = categoryId;

        try {
            const token = getCookie('token');
            if (!token) {
                showToast('Authentication required', 'error');
                return;
            }

            const response = await fetch(`/api/files/${fileId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify(updateData)
            });

            if (response.ok) {
                // Close modal
                document.querySelector('.fixed').remove();
                // Refresh files
                await loadFiles();
                showToast('File metadata updated successfully', 'success');
            } else {
                const errorData = await response.json().catch(() => ({}));
                throw new Error(errorData.message || 'Update failed');
            }
        } catch (error) {
            console.error('Error updating file metadata:', error);
            showToast('Error updating file metadata: ' + error.message, 'error');
        }
    }


    function applyBulkAction() {
        const action = document.getElementById('bulk-action').value;
        if (!action || selectedFiles.size === 0) return;

        if (action === 'delete') {
            if (confirm(`Delete ${selectedFiles.size} selected files?`)) {
                deleteSelectedFiles();
            }
        } else if (action === 'move') {
            showBulkMoveModal();
        }
    }

    async function deleteSelectedFiles() {
        const token = getCookie('token');
        const deletePromises = Array.from(selectedFiles).map(fileId =>
            fetch(`/api/files/${fileId}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            })
        );

        try {
            await Promise.all(deletePromises);
            selectedFiles.clear();
            await loadFiles();
            showToast('Files deleted successfully', 'success');
        } catch (error) {
            console.error('Error deleting files:', error);
            showToast('Error deleting files', 'error');
        }
    }

    async function moveSelectedFiles(targetCategory) {
        const token = getCookie('token');
        const movePromises = Array.from(selectedFiles).map(fileId =>
            fetch(`/api/files/${fileId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({ categoryId: targetCategory })
            })
        );

        try {
            await Promise.all(movePromises);
            selectedFiles.clear();
            await loadFiles();
            showToast('Files moved successfully', 'success');
        } catch (error) {
            console.error('Error moving files:', error);
            showToast('Error moving files', 'error');
        }
    }

    // Utility functions
    function formatBytes(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    // Enhanced functionality functions
    function loadStats() {
        // Calculate basic stats from current data
        const totalFiles = files.length;
        const totalSize = files.reduce((sum, file) => sum + (file.size || 0), 0);
        const averageDownloads = files.length > 0 ? 
            files.reduce((sum, file) => sum + (file.downloadCount || 0), 0) / files.length : 0;
        
        stats = {
            totalFiles,
            totalSize,
            averageDownloads,
            categoryCounts: {}
        };
        
        // Calculate category counts
        categories.forEach(cat => {
            stats.categoryCounts[cat.name] = files.filter(file => file.categoryId === cat._id).length;
        });
        
        updateStatsDisplay();
    }

    function updateStatsDisplay() {
        if (!stats) return;
        
        const totalFilesEl = document.getElementById('total-files');
        const totalSizeEl = document.getElementById('total-size');
        const avgDownloadsEl = document.getElementById('avg-downloads');
        
        if (totalFilesEl) totalFilesEl.textContent = stats.totalFiles;
        if (totalSizeEl) totalSizeEl.textContent = formatBytes(stats.totalSize);
        if (avgDownloadsEl) avgDownloadsEl.textContent = stats.averageDownloads.toFixed(1);
    }

    function handleSort(key, categoryId) {
        const isCurrentKey = sortConfig.key === key;
        const newDirection = isCurrentKey && sortConfig.direction === 'asc' ? 'desc' : 'asc';
        
        sortConfig = { key, direction: newDirection };
        
        // Sort files in the specific category
        const categoryFiles = files.filter(file => file.categoryId === categoryId);
        categoryFiles.sort((a, b) => {
            let aVal = a[key];
            let bVal = b[key];
            
            if (key === 'size') {
                aVal = aVal || 0;
                bVal = bVal || 0;
            } else if (key === 'uploadedAt') {
                aVal = new Date(aVal);
                bVal = new Date(bVal);
            }
            
            if (aVal < bVal) {
                return newDirection === 'asc' ? -1 : 1;
            }
            if (aVal > bVal) {
                return newDirection === 'asc' ? 1 : -1;
            }
            return 0;
        });
        
        // Re-render the category
        renderFiles();
    }

    function showFileDetails(fileId) {
        const file = files.find(f => f._id === fileId);
        if (!file) return;
        
        // Create modal
        const modal = document.createElement('div');
        modal.className = 'fixed inset-0 z-50 flex items-center justify-center p-4 bg-gray-900/50 backdrop-blur-sm';
        modal.innerHTML = `
            <div class="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto shadow-2xl">
                <div class="sticky top-0 bg-gray-50 border-b border-gray-200 p-4 z-10">
                    <div class="flex items-center justify-between">
                        <h2 class="text-2xl font-bold text-gray-900">File Details</h2>
                        <button onclick="this.closest('.fixed').remove()" class="text-gray-600 hover:text-gray-900 p-2 rounded-full hover:bg-gray-100 transition-colors">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                </div>
                <div class="p-6 space-y-6">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div class="space-y-4">
                            <div>
                                <h3 class="text-lg font-medium text-gray-900 mb-3">File Information</h3>
                                <div class="space-y-2 text-sm">
                                    <p class="text-gray-600"><strong>Display Name:</strong> ${file.originalName || file.filename}</p>
                                    <p class="text-gray-600"><strong>System Filename:</strong> ${file.filename}</p>
                                    <p class="text-gray-600"><strong>File Size:</strong> ${formatBytes(file.size)}</p>
                                    <p class="text-gray-600"><strong>File Type:</strong> ${file.type === 'url' ? 'Link' : (file.originalName ? file.originalName.split('.').pop().toUpperCase() : 'Unknown')}</p>
                                    <p class="text-gray-600"><strong>Uploaded:</strong> ${formatDate(file.uploadedAt)}</p>
                                    <p class="text-gray-600"><strong>Last Modified:</strong> ${formatDate(file.uploadedAt)}</p>
                                    <p class="text-gray-600"><strong>Downloads:</strong> ${file.downloadCount || 0}</p>
                                    <p class="text-gray-600"><strong>Category:</strong> ${file.categoryId ? categories.find(c => c._id === file.categoryId)?.name || 'Unknown' : 'Uncategorized'}</p>
                                    ${file.description ? `<p class="text-gray-600"><strong>Description:</strong> ${file.description}</p>` : ''}
                                    ${file.type === 'url' && file.url ? `<p class="text-gray-600"><strong>URL:</strong> <span class="text-purple-600 break-all">${file.url}</span></p>` : ''}
                                </div>
                            </div>
                        </div>
                        <div class="flex flex-col justify-center space-y-4">
                            <button onclick="downloadFile('${file._id}')" class="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center space-x-2">
                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l4-4m-4 4l-4-4m-6 2a9 9 0 110-18 9 9 0 010 18z" />
                                </svg>
                                <span>Download File</span>
                            </button>
                            <button onclick="copyToClipboard('${file.type === 'url' ? file.url : `/api/files/download/${file._id}`}')" class="px-6 py-3 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors flex items-center justify-center space-x-2">
                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                                </svg>
                                <span>Copy Link</span>
                            </button>
                            <button onclick="editFileMetadata('${file._id}')" class="px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center justify-center space-x-2">
                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                </svg>
                                <span>Edit Metadata</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
    }

    function downloadFile(fileId) {
        const file = files.find(f => f._id === fileId);
        if (!file) return;

        if (file.type === 'url') {
            // Open URL in new tab
            window.open(file.url, '_blank');
            showToast('Link opened in new tab', 'success');
        } else {
            // Download file
            const link = document.createElement('a');
            link.href = `/api/files/download/${fileId}`;
            link.download = file.filename;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            showToast('Download started', 'success');
        }
    }

    function copyToClipboard(text) {
        navigator.clipboard.writeText(text).then(() => {
            showToast('Link copied to clipboard', 'success');
        }).catch(() => {
            // Fallback for older browsers
            const textArea = document.createElement('textarea');
            textArea.value = text;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
            showToast('Link copied to clipboard', 'success');
        });
    }

    function handleFileDrop(event) {
        event.preventDefault();
        const files = Array.from(event.dataTransfer.files);
        uploadFileList = [...uploadFileList, ...files];
        renderFileList();
        updateUploadButton();
    }

    function renderFileList() {
        const fileList = document.getElementById('file-list');
        if (!fileList) return;
        
        fileList.innerHTML = '';
        
        if (uploadFileList.length === 0) {
            fileList.innerHTML = '<p class="text-gray-500 text-center py-4">No files selected</p>';
            return;
        }
        
        uploadFileList.forEach((fileWithId, index) => {
            const fileItem = document.createElement('div');
            fileItem.className = 'flex items-center justify-between p-3 bg-gray-50 rounded-lg border border-gray-200';
            fileItem.setAttribute('data-upload-id', fileWithId.id);
            fileItem.setAttribute('data-file-name', fileWithId.file.name);
            fileItem.innerHTML = `
                <div class="flex items-center space-x-3 flex-1">
                    <div class="w-8 h-8 bg-blue-100 rounded flex items-center justify-center">
                        <svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                    </div>
                    <div class="flex-1 min-w-0">
                        <p class="text-sm font-medium text-gray-900 truncate" title="${file.name}">${file.name}</p>
                        <p class="text-xs text-gray-500">${formatBytes(file.size)}</p>
                        <div class="w-full bg-gray-200 rounded-full h-1.5 mt-1">
                            <div class="progress-bar bg-blue-600 h-1.5 rounded-full transition-all duration-300" style="width: 0%"></div>
                        </div>
                        <p class="text-xs text-gray-400 progress-text">Ready to upload</p>
                    </div>
                </div>
                <button onclick="removeFileFromList('${fileWithId.id}')" class="text-red-500 hover:text-red-700 p-1 rounded hover:bg-red-50 transition-colors" title="Remove file">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            `;
            fileList.appendChild(fileItem);
        });
    }

    function removeFileFromList(uploadId) {
        const index = uploadFileList.findIndex(item => item.id === uploadId);
        if (index >= 0) {
            uploadFileList.splice(index, 1);
            renderFileList();
            updateUploadButton();
        }
    }


    function updateUploadButton() {
        const uploadBtn = document.getElementById('upload-btn');
        const uploadBtnText = document.getElementById('upload-btn-text');
        
        if (uploadMode === 'file') {
            const hasFiles = uploadFileList.length > 0;
            uploadBtn.disabled = !hasFiles;
            uploadBtnText.textContent = hasFiles ? `Upload ${uploadFileList.length} file${uploadFileList.length !== 1 ? 's' : ''}` : 'Upload';
        } else {
            const hasUrl = document.getElementById('url-input').value.trim() !== '';
            uploadBtn.disabled = !hasUrl;
            uploadBtnText.textContent = 'Upload Link';
        }
    }

    // Enhanced upload functionality
    async function uploadFiles() {
        const uploadBtn = document.getElementById('upload-btn');
        const uploadBtnText = document.getElementById('upload-btn-text');
        const progressContainer = document.getElementById('upload-progress');
        const progressBar = document.getElementById('upload-progress-bar');
        const progressText = document.getElementById('upload-progress-text');
        
        uploadBtn.disabled = true;
        uploadBtnText.textContent = 'Uploading...';
        progressContainer.classList.remove('hidden');
        
        try {
            if (uploadMode === 'file') {
                await uploadFileMode();
            } else {
                await uploadUrlMode();
            }
            
            showToast('Upload completed successfully!', 'success');
            hideUploadModal();
            loadFiles(); // Refresh the file list
        } catch (error) {
            console.error('Upload error:', {
                mode: uploadMode,
                error: error.message,
                stack: error.stack,
                fileListLength: uploadMode === 'file' ? uploadFileList.length : 0,
                url: uploadMode === 'url' ? document.getElementById('url-input').value : null
            });
            showToast('Upload failed: ' + error.message, 'error');
        } finally {
            console.log('Upload completed:', {
                mode: uploadMode,
                success: true,
                timestamp: new Date().toISOString()
            });
            uploadBtn.disabled = false;
            uploadBtnText.textContent = uploadMode === 'file' ? 'Upload' : 'Upload Link';
            progressContainer.classList.add('hidden');
            if (progressBar) progressBar.style.width = '0%';
            if (progressText) progressText.textContent = '0%';
        }
    }

    // Enhanced file selection handler
    function handleFileSelection(selectedFiles) {
        if (!selectedFiles || selectedFiles.length === 0) return;

        const newFiles = Array.from(selectedFiles);
        console.log('File selection:', {
            previousCount: uploadFileList.length,
            newCount: newFiles.length,
            totalCount: uploadFileList.length + newFiles.length,
            files: newFiles.map(f => ({ name: f.name, size: f.size, type: f.type }))
        });

        // Add unique IDs to new files
        const filesWithIds = newFiles.map(file => ({
            file,
            id: Date.now() + Math.random().toString(36).substr(2, 9)
        }));

        uploadFileList = [...uploadFileList, ...filesWithIds];
        renderFileList();
        updateUploadButton();

        if (newFiles.length > 0) {
            showToast(`${newFiles.length} file(s) added to upload queue`, 'success');
        }
    }


    async function uploadFileMode() {
        const token = getCookie('token');
        if (!token) {
            throw new Error('Authentication required');
        }

        // Validate files before upload
        if (!uploadFileList || uploadFileList.length === 0) {
            throw new Error('No files selected for upload');
        }

        // Check if files are still valid (not removed from list)
        const validFiles = uploadFileList.filter(file => file && file.name && file.size >= 0);
        if (validFiles.length !== uploadFileList.length) {
            throw new Error('Some selected files are no longer valid. Please select files again.');
        }

        const categoryId = document.getElementById('upload-category').value;
        const description = document.getElementById('upload-description').value;
        let successCount = 0;
        let errorCount = 0;
        const progressBar = document.getElementById('upload-progress-bar');
        const progressText = document.getElementById('upload-progress-text');

        console.log('Starting file upload:', {
            fileCount: uploadFileList.length,
            categoryId: categoryId,
            description: description,
            files: uploadFileList.map(f => ({ name: f.name, size: f.size, type: f.type }))
        });

        for (let i = 0; i < uploadFileList.length; i++) {
            const fileWithId = uploadFileList[i];
            const file = fileWithId.file;
            const uploadId = fileWithId.id;
            const progress = ((i + 1) / uploadFileList.length) * 100;

            console.log(`Uploading file ${i + 1}/${uploadFileList.length}:`, {
                name: file.name,
                size: file.size,
                type: file.type,
                uploadId: uploadId,
                progress: `${Math.round(progress)}%`
            });

            // Update overall progress
            if (progressBar) progressBar.style.width = `${progress}%`;
            if (progressText) progressText.textContent = `${Math.round(progress)}%`;

            // Update individual file progress
            updateUploadProgress(uploadId, progress);

            try {
                const formData = new FormData();
                formData.append('file', file);

                if (categoryId) {
                    formData.append('categoryId', categoryId);
                }

                if (description) {
                    formData.append('description', description);
                }

                const response = await fetch('/api/files/upload', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    },
                    body: formData
                });

                if (response.ok) {
                    successCount++;
                    const result = await response.json().catch(() => ({}));
                    console.log(`Upload successful for ${file.name}:`, result);
                    showToast(`${file.name} uploaded successfully`, 'success');
                } else {
                    let errorMessage = `Upload failed for ${file.name}`;
                    try {
                        const errorData = await response.json();
                        errorMessage = errorData.message || errorData.error || errorMessage;
                        console.error(`Upload failed for ${file.name}:`, {
                            status: response.status,
                            statusText: response.statusText,
                            errorData: errorData
                        });

                        // Add specific error context based on status code
                        if (response.status === 413) {
                            errorMessage = `File ${file.name} is too large. Please choose a smaller file.`;
                        } else if (response.status === 415) {
                            errorMessage = `File ${file.name} has an unsupported format.`;
                        } else if (response.status === 401) {
                            errorMessage = `Authentication failed. Please log in again.`;
                        } else if (response.status === 403) {
                            errorMessage = `You don't have permission to upload files.`;
                        }
                    } catch (parseError) {
                        // If response is not JSON, use status text
                        errorMessage = `Upload failed for ${file.name} (${response.status}: ${response.statusText})`;
                        console.error(`Upload failed for ${file.name} (non-JSON response):`, {
                            status: response.status,
                            statusText: response.statusText,
                            parseError: parseError.message
                        });
                    }
                    throw new Error(errorMessage);
                }
            } catch (error) {
                errorCount++;
                console.error(`Error uploading ${file.name}:`, {
                    error: error.message,
                    stack: error.stack,
                    file: { name: file.name, size: file.size, type: file.type }
                });
                showToast(`Failed to upload ${file.name}: ${error.message}`, 'error');
            }
        }
        
        // Show summary
        if (successCount > 0) {
            showToast(`Successfully uploaded ${successCount} file(s)`, 'success');
        }
        if (errorCount > 0) {
            showToast(`${errorCount} file(s) failed to upload`, 'error');
        }
        
        // Clear the file list
        uploadFileList = [];
        renderFileList();
    }

    function updateUploadProgress(uploadId, progress) {
        const fileItem = document.querySelector(`[data-upload-id="${uploadId}"]`);
        if (fileItem) {
            const progressBar = fileItem.querySelector('.progress-bar');
            const progressText = fileItem.querySelector('.progress-text');
            if (progressBar) {
                progressBar.style.width = `${progress}%`;
            }
            if (progressText) {
                progressText.textContent = `${Math.round(progress)}%`;
            }
        }
    }

    async function uploadUrlMode() {
        const url = document.getElementById('url-input').value.trim();
        const categoryId = document.getElementById('upload-category').value;
        const description = document.getElementById('upload-description').value;

        // Check for empty URL
        if (!url) {
            throw new Error('Please enter a URL');
        }

        // Check URL length (reasonable limit like 2048 characters)
        if (url.length > 2048) {
            throw new Error('URL is too long. Please use a shorter URL (max 2048 characters)');
        }

        // Validate URL format
        let urlObject;
        try {
            urlObject = new URL(url);
        } catch (urlError) {
            throw new Error('Please enter a valid URL (e.g., https://example.com/file)');
        }

        // Check for valid protocols
        if (!['http:', 'https:'].includes(urlObject.protocol)) {
            throw new Error('URL must use HTTP or HTTPS protocol');
        }
        
        const uploadData = {
            url: url,
            categoryId: categoryId || undefined,
            description: description || undefined
        };

        const response = await fetch('/api/files/upload-link', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(uploadData)
        });

        if (!response.ok) {
            let errorMessage = 'URL upload failed';
            try {
                const errorData = await response.json();
                errorMessage = errorData.message || errorData.error || errorMessage;

                // Add specific error context based on status code
                if (response.status === 413) {
                    errorMessage = 'URL content is too large to process';
                } else if (response.status === 415) {
                    errorMessage = 'URL content type is not supported';
                } else if (response.status === 401) {
                    errorMessage = 'Authentication failed. Please log in again.';
                } else if (response.status === 403) {
                    errorMessage = 'You don\'t have permission to upload URLs';
                } else if (response.status === 429) {
                    errorMessage = 'Too many upload requests. Please wait a moment and try again.';
                }
            } catch (parseError) {
                // If response is not JSON, use status text
                errorMessage = `URL upload failed (${response.status}: ${response.statusText})`;
            }
            throw new Error(errorMessage);
        }
        
        const result = await response.json();
        showToast(`Link "${result.filename || url}" uploaded successfully`, 'success');
        
        // Clear the URL input
        document.getElementById('url-input').value = '';
    }

    // Quick upload function for easy file selection
    function quickUploadFile() {
        const input = document.createElement('input');
        input.type = 'file';
        input.multiple = true;
        input.accept = '*';
        input.onchange = function(e) {
            if (e.target.files.length > 0) {
                handleFileSelection(e.target.files);
                showUploadModal();
            }
        };
        input.click();
    }
</script>